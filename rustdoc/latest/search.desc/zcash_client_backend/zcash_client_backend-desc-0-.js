searchState.loadedDescShard("zcash_client_backend", 0, "<em>A crate for implementing Zcash light clients.</em>\nA decrypted shielded output.\nThe output was received on one of the wallet’s external …\nThe Orchard protocol\nThe output was decrypted using one of the wallet’s …\nThe Sapling protocol\nA shielded value pool.\nAn enumeration of the possible relationships a TXO can …\nThe transparent value pool\nThe output was received on one of the wallet’s …\nThe account that decrypted the note.\nUtilities for Zcash wallet construction\nScans a <code>Transaction</code> for any information that can be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe index of the output within the shielded outputs of the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe memo bytes included with the note.\nThe note within the output.\nTypes related to the construction and evaluation of …\nThis module contains generated code for handling light …\nTools for scanning a compact representation of the Zcash …\nImplementation of the synchronization flow described in …\nReturns a <code>TransferType</code> value that is determined based upon …\nStructs representing transaction data scanned from the …\nAn address that funds can be sent to.\nAn enumeration of protocol-level receiver types.\nA Sapling payment address.\nA ZIP 320 transparent-source-only P2PKH address, or “TEX …\nA transparent address corresponding to either a public key …\nA ZIP 316 Unified Address.\nA Unified Address.\nReturns whether or not this <code>Address</code> can receive funds in …\nReturns whether or not this receiver corresponds to <code>addr</code>, …\nAttempts to decode an <code>Address</code> value from its <code>ZcashAddress</code> …\nReturns the string encoding of this <code>UnifiedAddress</code> for the …\nConverts this <code>Address</code> to its encoded string representation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a Unified Address from a given set of receivers.\nReturns whether this address has an Orchard receiver.\nReturns whether this address has a Sapling receiver.\nReturns whether this address has a Transparent receiver.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the set of receiver typecodes.\nReturns the Sapling receiver within this Unified Address, …\nReturns the transparent address corresponding to this …\nConverts this receiver to a <code>ZcashAddress</code> for the given …\nConverts this <code>Address</code> to its encoded <code>ZcashAddress</code> …\nReturns the transparent receiver within this Unified …\nAttempts to decode an <code>Address</code> value from its <code>ZcashAddress</code> …\nReturns the set of unknown receivers of the unified …\nA set of capabilities that a client account must provide.\nThe concrete account type used by this wallet backend.\nBalance information for a single account. The sum of this …\nA data structure used to set the birthday height for an …\nBackend-specific account identifier.\nThe type of the account identifier.\nMetadata about the structure of the wallet for a …\nAn enumeration used to control what information is tracked …\nThe kinds of accounts supported by <code>zcash_client_backend</code>.\nA note will be selected if it satisfies the first …\nBalance information for a value within a single pool in an …\nErrors that can occur in the construction of an …\nMetadata describing the sizes of the zcash note commitment …\nA <code>u8</code> value in the range 0..=MAX\nA note will be selected if it satisfies both of the …\nA transaction that was detected during scanning of the …\nAn account derived from a known seed.\nTransaction enhancement (download of complete raw …\nThe type of errors produced by a wallet backend.\nThe type of errors that may be generated when querying a …\nSelects notes having value greater than or equal to the …\nSelects notes having value greater than or equal to the …\nSelects notes having value greater than or equal to …\nThe number of ephemeral addresses that can be safely …\nInformation about the chain’s view of a transaction is …\nAn account imported from a viewing key.\nA trait representing the capability to query a data store …\nThe requested transaction ID corresponds to a transaction …\nThe wallet contains no accounts.\nThe wallet contains no derived accounts.\nThe requested transaction ID corresponds to a transaction …\nThe seed is not relevant to any of the derived accounts …\nA small query language for filtering notes belonging to an …\nBackend-specific note identifier.\nA predicate that can be used to choose whether or not a …\nAn enumeration of constraints that can be applied when …\nThe output of a transaction sent by the wallet.\nMetadata about the structure of unspent outputs in a …\nA type representing the progress the wallet has made …\nA polymorphic ratio type, usually used for rational …\nThe seed is relevant to at least one derived account …\nThe height of subtree roots in the Sapling note commitment …\nThe type of the backing <code>ShardStore</code> for the Sapling note …\nThe subset of information that is relevant to this wallet …\nA struct used to return the vectors of note commitments …\nThe protocol-specific note commitment and nullifier data …\nThe relevance of a seed to a given wallet.\nA transaction that was constructed and sent by the wallet.\nAn output of a transaction generated by the wallet.\nSpendable shielded outputs controlled by the wallet.\nFor spending accounts, the wallet will track information …\nInformation about transactions that receive or spend funds …\nA request for transaction data enhancement, spentness …\nMetadata about the status of a transaction obtained by …\nThe requested transaction ID was not recognized by the …\nThe type of identifiers used to look up transparent UTXOs.\nFor view-only accounts, the wallet will not track spend …\nThis trait describes a capability for manipulating wallet …\nRead-only operations required for light wallet functions.\nA type representing the potentially-spendable value of …\nRead-only operations required for testing light wallet …\nThis trait encapsulates the write capabilities required to …\nThe <code>Balance</code> value having zero values for all its fields.\nThe <code>Balance</code> value having zero values for all its fields.\nSource metadata for a ZIP 32-derived key.\nReturns the balances of accounts in the wallet, keyed by …\nReturns the id for the account that created the outputs.\nReturns the account-level index in the ZIP 32 derivation …\nAdds the specified value to the pending change total, …\nAdds the specified value to the pending spendable total, …\nAdds the specified value to the spendable total, checking …\nA macro to be used by <code>ambassador::Delegate</code> to delegate …\nA macro to be used by <code>ambassador::Delegate</code> to delegate …\nA macro to be used by <code>ambassador::Delegate</code> to delegate …\nA macro to be used by <code>ambassador::Delegate</code> to delegate …\nA macro to be used by <code>ambassador::Delegate</code> to delegate …\nConstructs a <code>NoteFilter::Attempt</code> query node.\nReturns the metadata for the block at the height to which …\nReturns the block hash of the block that was scanned.\nReturns the hash of the block\nReturns the block height.\nReturns block metadata for the maximum height that the …\nReturns the available block metadata for the block at the …\nReturns the block time of the block that was scanned, as a …\nTools for blockchain validation &amp; scanning\nReturns the height of the chain as known to the wallet as …\nReturns the height of the current chain tip.\nReturns the value in the account of shielded change notes …\nReturns the total value of change and/or shielding …\nConstructs a <code>NoteFilter::Combine</code> query node.\nReturns the ordered list of note commitments to be added …\nTells the wallet to track the next available account-level …\nReturns the timestamp of the transaction’s creation.\nReturns the denominator of the ratio.\nConstruct a new empty <code>SpendableNotes</code>.\nTypes for wallet error handling.\nReturns the fee paid by the transaction.\nReturns the size of the note commitment tree as of the end …\nIf a given ephemeral address might have been reserved, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a new <code>AccountBirthday</code> at the given network …\nConstructs a new <code>SentTransactionOutput</code> from its …\nConstructs an output from its test-relevant parts.\nConstructs a new <code>BlockMetadata</code> value from its constituent …\nConstructs a new <code>AccountBirthday</code> from its constituent …\nConstructs a new <code>AccountBirthday</code> at Sapling activation, …\nConstructs a new <code>AccountBirthday</code> from a <code>TreeState</code> returned …\nReturns the height below which all blocks have been …\nReturns the account corresponding to the given ID, if any.\nReturns the birthday height for the given account, or an …\nReturns the account corresponding to a given …\nReturns a vector with the IDs of all accounts known to …\nReturns metadata describing the structure of the wallet …\nReturns the block hash for the block at the given height, …\nReturns the most recently generated unified address for …\nReturns the account corresponding to a given …\nReturns a vector of ephemeral transparent addresses …\nReturns the block height and hash for the block at the …\nReturns the memo for a note.\nGenerates and persists the next available diversified …\nReturns all the notes that have been received by the …\nReturns the nullifiers for Sapling notes that the wallet …\nReturns the note IDs for shielded notes sent by the wallet …\nReturns the outputs for a transaction sent by the wallet.\nFetches a spendable note by indexing into a transaction’…\nReturns the list of spendable transparent outputs received …\nReturns the default target height (for the block in which …\nReturns a transaction.\nReturns the metadata associated with a given transparent …\nReturns a mapping from each transparent receiver …\nFetches the transparent output corresponding to the …\nReturns the set of non-ephemeral transparent receivers …\nReturns the block height in which the specified …\nReturns a vector of transaction summaries.\nReturns all unified full viewing keys known to this wallet.\nFetches the transparent output corresponding to the …\nReturns the birthday height for the wallet.\nReturns a <code>WalletSummary</code> that represents the sync status, …\nReturns the height of the block that was scanned.\nReturns the birthday height of the account.\nReturns the unique identifier for the account.\nTells the wallet to track a specific account index for a …\nTells the wallet to track an account using a unified full …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes <code>self</code> and returns the lists of Sapling and Orchard …\nConsumes this <code>SpendableNotes</code> value and produces a vector of\nReturns whether or not wallet scanning is complete.\nReturns the key derivation metadata for the account …\nReturns the application-level key source identifier.\nReturns the memo that was attached to the output, if any. …\nReturns the height at which the transaction was mined, if …\nReturns the human-readable name for the account, if any …\nConstruct a new <code>SpendableNotes</code> from its constituent parts.\nConstructs a new <code>DecryptedTransaction</code> from its constituent …\nConstructs a new <code>SentTransaction</code> from its constituent …\nConstructs new derivation metadata from its constituent …\nConstructs a new Ratio from a numerator and a denominator.\nConstructs a new progress value from its constituent parts.\nConstructs a new <code>WalletSummary</code> from its constituent parts.\nConstructs a new <code>PoolMeta</code> value from its constituent parts.\nConstructs a new <code>AccountMeta</code> value from its constituent …\nCreates a <code>BoundedU8</code> from a <code>u8</code> value.\nCreates a constant <code>BoundedU8</code> from a <code>u8</code> value.\nReturns the Sapling subtree index that should start the …\nReturns the number of unspent outputs in the account, …\nReturns the number of unspent notes in the wallet for the …\nReturns the vector of nullifiers for each transaction in …\nReturns the numerator of the ratio.\nReturns metadata about Orchard notes belonging to the …\nReturns the <code>Balance</code> of Orchard funds in the account.\nReturns the index within the transaction that contains the …\nReturns the outputs of the transaction.\nReturns the progress of scanning the chain to bring the …\nReturns whether the account is a spending account or a …\nUpdates the state of the wallet database by persisting the …\nAdds a transparent UTXO received by the wallet to the data …\nAdds a sequence of Sapling note commitment tree subtree …\nReturns the recipient address of the transaction, or the …\nReturns the height at which the wallet should exit “…\nReturns the progress the wallet has made in scanning …\nReserves the next <code>n</code> available ephemeral addresses for the …\nReturns the set of spendable Sapling notes.\nReturns the Sapling note commitment tree and nullifier …\nReturns metadata about Sapling notes belonging to the …\nThe ordered vector of note commitments for Sapling outputs …\nReturns the <code>Balance</code> of Sapling funds in the account.\nReturns the Sapling note commitment tree frontier as of …\nReturns the Sapling outputs that were decrypted from the …\nReturns the size of the Sapling note commitment tree for …\nComputes the total value of Sapling notes.\nReturns the progress the wallet has made in scanning …\nCommon types used for managing a queue of scanning ranges.\nReturns the seed fingerprint.\nChecks whether the given seed is relevant to any of the …\nReturns a list of spendable notes sufficient to cover the …\nUpdates the wallet backend with respect to the status of a …\nReturns whether the specified Sapling note should be …\nReturns whether this account is derived or imported, and …\nReturns the value in the account that may currently be …\nReturns the total value of shielded (Sapling and Orchard) …\nCaches a decrypted transaction in the persistent wallet …\nSaves information about transactions constructed by the …\nReturns a vector of suggested scan ranges based upon the …\nConsumes this value and returns the Sapling notes …\nReturns the block height that this transaction was created …\nUtilities for testing wallets based upon the …\nReturns the <code>BlockMetadata</code> corresponding to the scanned …\nReturns the total value of funds represented by this …\nReturns the total value of funds belonging to the account.\nReturns the total number of unspent shielded notes …\nComputes the total value of spendable inputs\nReturns the total value of shielded notes represented by …\nReturns a vector of <code>TransactionDataRequest</code> values that …\nReturns the list of transactions from this block that are …\nTruncates the wallet database to at most the specified …\nReturns the raw transaction data.\nReturns the transaction that was sent.\nReturns the UFVK that the wallet backend has stored for …\nReturns the UIVK that the wallet backend has stored for …\nReturns the total value of unspent transparent transaction …\nReturns the <code>Balance</code> of unshielded funds in the account.\nUpdates the wallet’s view of the blockchain.\nReturns the list of UTXOs spent in the created transaction.\nVerifies that the given seed corresponds to the viewing …\nReturns the value of the newly created output.\nReturns the total value of unspent outputs in the account …\nReturns the wrapped <code>u8</code> value.\nReturns the value in the account of all remaining received …\nReturns the value of shielded funds that are not yet …\nFunctions for creating Zcash transactions that spend funds …\nProvides a mutable reference to the <code>Balance</code> of Orchard …\nProvides a mutable reference to the <code>Balance</code> of Sapling …\nEvaluates the given callback function with a reference to …\nProvides a mutable reference to the <code>Balance</code> of transparent …\n<code>BlockCache</code> is a trait that extends <code>BlockSource</code> and defines …\nThis trait provides sequential access to raw blockchain …\nThe final note commitment tree state for each shielded …\nA struct containing metadata about a subtree root of the …\nMetadata about modifications to the wallet state made in …\nReturn the hash of the block.\nReturns the block height to which this chain state applies.\nDeletes a range of compact blocks from the block cache.\nConstruct a new empty chain state.\nTypes for chain scanning error handling.\nReturns the frontier of the Sapling note commitment tree …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a new <code>CommitmentTreeRoot</code> from its constituent …\nFinds the height of the highest block known to the block …\nInserts a vec of compact blocks into the block cache.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a new <code>ChainState</code> from its constituent parts.\nRetrieves contiguous compact blocks specified by the given …\nReturns the number of Sapling notes belonging to the …\nReturns the root of the complete subtree.\nScans at most <code>limit</code> blocks from the provided block source …\nReturns the range of blocks successfully scanned.\nReturns the number of our previously-detected Sapling …\nReturns the block height at which the leaf that completed …\nRemoves all cached blocks above a specified block height.\nScan the specified <code>limit</code> number of blocks from the …\nAn error that was produced by the underlying block data …\nErrors related to chain validation and scanning.\nA block that was received violated rules related to chain …\nAn error that was produced by wallet operations in the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe given account cannot be used for spending, because it …\nNo account could be found corresponding to a provided ID.\nAn error occurred parsing the address from a payment …\nThe address associated with a record being inserted was …\nZcash amount computation encountered an overflow or …\nAn error occurred building a new transaction.\nAn error in change selection during transaction proposal …\nAn error in computations involving the note commitment …\nAn error occurred retrieving data from the underlying data …\nErrors that can occur as a consequence of wallet …\nUnable to create a new spend because the wallet balance is …\nA proposed transaction cannot be built because it requires …\nNo account could be found corresponding to a provided …\nIt is forbidden to provide a memo when constructing a …\nAttempted to create a spend to an unsupported Unified …\nA note being spent does not correspond to either the …\nAn error in note selection\nThe wallet tried to pay to an ephemeral transparent …\nAn error in transaction proposal construction\nThe proposal was structurally valid, but tried to do one …\nThe wallet must first perform a scan of the blockchain …\nAttempted to send change to an unsupported pool.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBlocks that must be scanned to complete the latest note …\nBlocks that must be scanned to complete note commitment …\nBlock ranges to be scanned to advance the fully-scanned …\nBlock ranges that are ignored have lowest priority.\nBlock ranges adjacent to heights at which the user opened …\nScanning range priority levels.\nA range of blocks to be scanned, along with its associated …\nBlock ranges that have already been scanned will not be …\nA previously scanned range that must be verified to check …\nReturns the range of block heights to be scanned.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a scan range from its constituent parts.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether or not the scan range is empty.\nReturns the number of blocks in the scan range.\nReturns the priority with which the scan range should be …\nSplits this scan range at the specified height, such that …\nShifts the end of the block range to the left if …\nShifts the start of the block range to the right if …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConfigures how a <code>TestFvk</code> receives a particular output.\nMetadata about a block generated by <code>TestState</code>.\nThe default network used by <code>TestBuilder::new</code>.\nTrait representing the ability to construct a new data …\nThe output will be sent to the default address of the full …\nThe output will be sent to the specified diversified …\nA fake output of a <code>CompactTx</code>.\nA handle that confers ownership of a specific wallet …\nThe initial chain state for a test.\nThe output will be sent to the internal receiver of the …\nA mock wallet data source that implements the bare minimum …\nA convenience type for the note commitments contained …\nThe type of nullifier corresponding to the kind of note …\nTrait method exposing the ability to reset the wallet …\nThe test account configured for a <code>TestState</code>.\nA <code>TestState</code> builder, that configures the environment for a …\nTrait used by tests that require a block cache.\nTrait used by tests that require a full viewing key.\nThe state for a <code>zcash_client_backend</code> test.\nInformation about a transaction that the wallet is …\nReturns the underlying wallet account.\nReturns the wallet-internal ID for the account that this …\nReturns the net change in balance that this transaction …\nAdds both a spend and an output to the given <code>CompactTx</code>.\nAdds a single output to the given <code>CompactTx</code> that will be …\nAdds a single spend to the given <code>CompactTx</code> of a note …\nProduces metadata for a block as of the given chain state.\nReturns the birthday that was configured for the account.\nExposes the block cache as a <code>BlockSource</code>.\nBuilds the state for this test.\nExposes an immutable reference to the test’s <code>BlockSource</code>.\nInformation about the chain’s state as of the chain tip.\nInvokes <code>create_proposed_transactions</code> with the given …\nReturns <code>true</code> if, from the wallet’s current view of the …\nReturns the expiry height of the transaction, if known.\nReturns the fee paid by this transaction, if known.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nExtracts the note commitments from the given compact block.\nConstructs a <code>TransactionSummary</code> from its parts.\nCreates a fake block with the given height and hash …\nAdds an empty block to the cache, advancing the simulated …\nCreates a fake block at the expected next height …\nCreates a fake block at the expected next height …\nCreates a fake block at the expected next height …\nCreates a fake block at the expected next height …\nCreates a fake block at the expected next height spending …\nReturns the amount of change in the given account that is …\nReturns the balance in the given account that is detected …\nReturns the balance in the given account that is spendable …\nReturns the total balance in the given account at this …\nReturns a transaction from the history.\nReturns a summary of the wallet at this point in the test.\nReturns <code>true</code> if the account received a change note as part …\nReturns the height of this block.\nInserts a CompactBlock into the cache DB.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this is detectably a shielding transaction.\nReturns the cached chain state corresponding to the latest …\nReturns the number of non-empty memos viewable by the …\nReturns the height of the mined block containing this …\nExposes the network in use.\nConstructs a new test environment builder.\nConstructs a new mock wallet data source.\nConstructs a new fake output with the given properties.\nConstructs a new data store.\nProduces metadata for a block “before shielded time”, …\nConvenience method for obtaining the NU5 activation height …\nReturns the size of the Orchard note commitment tree as of …\nRoots of the completed Sapling subtrees as of this chain …\nInvokes <code>propose_shielding</code> with the given arguments.\nInvokes <code>propose_standard_transfer_to_address</code> with the …\nInvokes <code>propose_transfer</code> with the given arguments.\nAdds a transparent UTXO received by the wallet to the data …\nInsert shard roots for both trees.\nConstructs a new random fake external output to the given …\nReturns the number of notes created in this transaction …\nReplaces the wallet in <code>st</code> (via <code>TestState::wallet_mut</code>) with …\nResets the wallet using a new wallet database but with the …\nExposes the test framework’s source of randomness.\nReturns the Sapling note commitments.\nConvenience method for obtaining the Sapling activation …\nReturns the size of the Sapling note commitment tree as of …\nReturns the Sapling outgoing viewing key corresponding to …\nInvokes <code>scan_cached_blocks</code> with the given arguments, …\nReturns the number of notes created in this transaction …\nSets the account index for the test account.\nInvokes <code>shield_transparent_funds</code> with the given arguments.\nPrepares and executes the given <code>zip321::TransactionRequest</code> …\nReturns the number of notes spent by the account in this …\nReturns a reference to the test account, if one was …\nReturns the test account’s Sapling DFVK, if one was …\nExposes the seed for the test wallet.\nDeletes block data from the cache, retaining blocks at …\nTruncates the test wallet and block cache to the specified …\nTruncates the test wallet to the specified height, and …\nInvokes <code>scan_cached_blocks</code> with the given arguments.\nReturns the transaction’s ID.\nReturns the account’s unified spending key.\nExposes an immutable reference to the test’s <code>DataStore</code>.\nExposes a mutable reference to the test’s <code>DataStore</code>.\nConfigures the environment with a <code>TestAccount</code> that has a …\nConfigures the environment with a <code>TestAccount</code> that has a …\nAdds a block cache to the test environment.\nAdds a wallet data store to the test environment.\nConfigures the test to start with the given initial chain …\nTrait that exposes the pool-specific types and operations …\nTests sending funds within the given shielded pool in a …\nType for running pool-agnostic tests on the Sapling pool.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis test attempts to verify that transparent funds …\nThe given account cannot be used for spending, because it …\nThe given account cannot be used for spending, because it …\nThe given account cannot be used for spending, because it …\nThe given account cannot be used for spending, because it …\nThe given account cannot be used for spending, because it …\nNo account could be found corresponding to a provided ID.\nNo account could be found corresponding to a provided ID.\nNo account could be found corresponding to a provided ID.\nNo account could be found corresponding to a provided ID.\nNo account could be found corresponding to a provided ID.\nAn error occurred parsing the address from a payment …\nAn error occurred parsing the address from a payment …\nAn error occurred parsing the address from a payment …\nAn error occurred parsing the address from a payment …\nAn error occurred parsing the address from a payment …\nThe address associated with a record being inserted was …\nThe address associated with a record being inserted was …\nThe address associated with a record being inserted was …\nThe address associated with a record being inserted was …\nThe address associated with a record being inserted was …\nZcash amount computation encountered an overflow or …\nZcash amount computation encountered an overflow or …\nZcash amount computation encountered an overflow or …\nZcash amount computation encountered an overflow or …\nZcash amount computation encountered an overflow or …\nAn error occurred building a new transaction.\nAn error occurred building a new transaction.\nAn error occurred building a new transaction.\nAn error occurred building a new transaction.\nAn error occurred building a new transaction.\nAn error in change selection during transaction proposal …\nAn error in change selection during transaction proposal …\nAn error in change selection during transaction proposal …\nAn error in change selection during transaction proposal …\nAn error in change selection during transaction proposal …\nAn error in computations involving the note commitment …\nAn error in computations involving the note commitment …\nAn error in computations involving the note commitment …\nAn error in computations involving the note commitment …\nAn error in computations involving the note commitment …\nErrors that may be generated in combined creation and …\nAn error occurred retrieving data from the underlying data …\nAn error occurred retrieving data from the underlying data …\nAn error occurred retrieving data from the underlying data …\nAn error occurred retrieving data from the underlying data …\nAn error occurred retrieving data from the underlying data …\nUnable to create a new spend because the wallet balance is …\nUnable to create a new spend because the wallet balance is …\nUnable to create a new spend because the wallet balance is …\nUnable to create a new spend because the wallet balance is …\nUnable to create a new spend because the wallet balance is …\nA proposed transaction cannot be built because it requires …\nA proposed transaction cannot be built because it requires …\nA proposed transaction cannot be built because it requires …\nA proposed transaction cannot be built because it requires …\nA proposed transaction cannot be built because it requires …\nNo account could be found corresponding to a provided …\nNo account could be found corresponding to a provided …\nNo account could be found corresponding to a provided …\nNo account could be found corresponding to a provided …\nNo account could be found corresponding to a provided …\nIt is forbidden to provide a memo when constructing a …\nIt is forbidden to provide a memo when constructing a …\nIt is forbidden to provide a memo when constructing a …\nIt is forbidden to provide a memo when constructing a …\nIt is forbidden to provide a memo when constructing a …\nAttempted to create a spend to an unsupported Unified …\nAttempted to create a spend to an unsupported Unified …\nAttempted to create a spend to an unsupported Unified …\nAttempted to create a spend to an unsupported Unified …\nAttempted to create a spend to an unsupported Unified …\nA note being spent does not correspond to either the …\nA note being spent does not correspond to either the …\nA note being spent does not correspond to either the …\nA note being spent does not correspond to either the …\nA note being spent does not correspond to either the …\nAn error in note selection\nAn error in note selection\nAn error in note selection\nAn error in note selection\nAn error in note selection\nThe wallet tried to pay to an ephemeral transparent …\nThe wallet tried to pay to an ephemeral transparent …\nThe wallet tried to pay to an ephemeral transparent …\nThe wallet tried to pay to an ephemeral transparent …\nThe wallet tried to pay to an ephemeral transparent …\nAn error in transaction proposal construction\nAn error in transaction proposal construction\nAn error in transaction proposal construction\nAn error in transaction proposal construction\nAn error in transaction proposal construction\nThe proposal was structurally valid, but tried to do one …\nThe proposal was structurally valid, but tried to do one …\nThe proposal was structurally valid, but tried to do one …\nThe proposal was structurally valid, but tried to do one …\nThe proposal was structurally valid, but tried to do one …\nErrors that may be generated in construction of proposals …\nErrors that may be generated in construction of proposals …\nThe wallet must first perform a scan of the blockchain …\nThe wallet must first perform a scan of the blockchain …\nThe wallet must first perform a scan of the blockchain …\nThe wallet must first perform a scan of the blockchain …\nThe wallet must first perform a scan of the blockchain …\nErrors that may be generated in the execution of shielding …\nErrors that may be generated in the execution of proposals …\nAttempted to send change to an unsupported pool.\nAttempted to send change to an unsupported pool.\nAttempted to send change to an unsupported pool.\nAttempted to send change to an unsupported pool.\nAttempted to send change to an unsupported pool.\nConstruct, prove, and sign a transaction or series of …\nScans a <code>Transaction</code> for any information that can be …\nTypes related to the process of selecting inputs to be …\nConstructs a proposal to shield all of the funds belonging …\nProposes making a payment to the specified address from …\nSelect transaction inputs, compute fees, and construct a …\nConstructs a transaction that consumes available …\nAn error occurred parsing the address from a payment …\nAn intermediate value overflowed or underflowed the valid …\nAn error occurred in computing the change or fee for the …\nAn error occurred accessing the underlying data store.\nThe type of errors that may be generated in input selection\nThe type of errors that may be generated in input selection\nAn <code>InputSelector</code> implementation that uses a greedy …\nErrors that can occur as a consequence of greedy input …\nA strategy for selecting transaction inputs and proposing …\nThe type of errors that may be produced in input selection.\nThe type of data source that the input selector expects to …\nThe type of data source that the input selector expects to …\nInsufficient funds were available to satisfy the payment …\nInput selection attempted to generate an invalid …\nAn error occurred specific to the provided input selector…\nA strategy for selecting transaction inputs and proposing …\nThe data source does not have enough information to choose …\nA unified address did not contain a supported receiver.\nSupport for transparent-source-only (TEX) addresses …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new greedy input selector that uses the …\nPerforms input selection and returns a proposal for the …\nPerforms input selection and returns a proposal for …\nA trait for encoding and decoding Zcash addresses.\nDecodes a Zcash address from its string representation.\nDecodes an <code>ExtendedFullViewingKey</code> from a Bech32-encoded …\nDecodes an <code>ExtendedSpendingKey</code> from a Bech32-encoded …\nDecodes an <code>ExtendedFullViewingKey</code> and the <code>NetworkType</code> that …\nDecodes a <code>PaymentAddress</code> from a Bech32-encoded string.\nDecodes a <code>TransparentAddress</code> from a Base58Check-encoded …\nEncode a Zcash address.\nWrites an <code>ExtendedFullViewingKey</code> as a Bech32-encoded …\nWrites an <code>ExtendedSpendingKey</code> as a Bech32-encoded string.\nWrites a <code>PaymentAddress</code> as a Bech32-encoded string.\nWrites a <code>PaymentAddress</code> as a Bech32-encoded string using …\nWrites a <code>TransparentAddress</code> as a Base58Check-encoded …\nWrites a <code>TransparentAddress</code> as a Base58Check-encoded …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTye type of wallet metadata that this change strategy …\nAllow dust amounts to be added to the transaction fee.\nExplicitly allow the creation of dust change amounts …\nThe proposed bundle structure would violate bundle type …\nErrors that can occur in computing suggested change and/or …\nA trait that represents the ability to compute the …\n<code>ChangeValue</code> represents either a proposed change output to …\nAn enumeration of actions to take when a transaction would …\nSome of the inputs provided to the transaction have value …\nA policy describing how a <code>ChangeStrategy</code> should treat …\n<code>EphemeralBalance</code> describes the ephemeral input or output …\nInsufficient inputs were provided to change selection to …\nThe type of metadata source that this change strategy …\nDo not allow creation of dust outputs; instead, require …\nA policy that describes how change output should be split …\nAn enumeration of the standard fee rules supported by the …\nAn error occurred that was specific to the change …\nThe amount of change and fees required to make a …\nReturns the action to take in the event that a dust change …\nComputes the totals of inputs, suggested change amounts, …\nReturns a value that will be used to override the dust …\nConstructs a new ephemeral transparent output value.\nReturns the fee computed for the transaction, assuming …\nReturns the fee rule that this change strategy will …\nUses the provided metadata source to obtain the wallet …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this is to be an ephemeral output.\nReturns the memo to be associated with the output.\nReturns the minimum value for a note resulting from …\nConstructs a new balance from its constituent parts.\nConstructs a new dust output policy.\nReturns the pool to which the change or ephemeral output …\nThe change values proposed by the <code>ChangeStrategy</code> that …\nTypes related to computation of fees and change related to …\nConstructs a new change value that will be created as a …\nConstructs a new change value that will be created as a …\nConstructs a <code>SplitPolicy</code> that prescribes a single output …\nReturns the number of output notes to produce from the …\nChange strategies designed for use with a standard fee.\nReturns the number of outputs that this policy will …\nReturns the sum of the proposed change outputs and the …\nReturns the value of the change or ephemeral output to be …\nConstructs a new <code>SplitPolicy</code> that splits change to ensure …\nChange strategies designed to implement the ZIP 317 fee …\nThe total of the inputs provided to change selection\nThe total amount of input value required to fund the …\nThe identifiers for Sapling inputs that could not be …\nThe outpoints for transparent inputs that could not be …\nA trait that provides a minimized view of Sapling bundle …\nA <code>BundleView</code> for the empty bundle with <code>BundleType::DEFAULT</code> …\nThe type of inputs to the bundle.\nA trait that provides a minimized view of a Sapling input …\nThe type of inputs of the bundle.\nA trait that provides a minimized view of a Sapling output …\nReturns the type of the bundle\nReturns the argument unchanged.\nReturns the inputs to the bundle.\nCalls <code>U::from(self)</code>.\nAn identifier for the input being spent.\nReturns the outputs of the bundle.\nThe value of the input being spent.\nThe value of the output being produced.\nA change strategy that proposes change as potentially …\nA change strategy that proposes change as a single output. …\nA change strategy that attempts to split the change value …\nA change strategy that proposes change as a single output. …\nAn extension to the <code>FeeRule</code> trait that exposes methods …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the ZIP 317 number of grace actions\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the ZIP 317 marginal fee.\nConstructs a new <code>SingleOutputChangeStrategy</code> with the …\nConstructs a new <code>MultiOutputChangeStrategy</code> with the …\nConstructs a new unified address request that allows a …\nErrors that can occur in the generation of unified …\nThe associated receiver should be included, if a …\nA type for errors that can occur when decoding keys from …\nThe space of available diversifier indices has been …\nA version identifier for the encoding of unified spending …\nThe diversifier index could not be mapped to a valid …\nThe requested diversifier index was outside the range of …\nThe key data could not be decoded from its string …\nA requested address typecode was recognized, but the …\nNo receiver of the associated type may be included in the …\nThe Orchard era begins at Orchard activation, and will end …\nAn enumeration of the ways in which a receiver may be …\nA requested address typecode was not recognized, so we are …\nA receiver of the associated type is required to be …\nA Unified address cannot be generated without at least one …\nSpecification for how a unified address should be …\nA ZIP 316 unified full viewing key.\nA ZIP 316 unified incoming viewing key.\nA set of spending keys that are all associated with a …\nAttempts to derive the Unified Address for the given …\nAttempts to derive the Unified Address for the given …\nParses a <code>UnifiedFullViewingKey</code> from its ZIP 316 string …\nParses a <code>UnifiedFullViewingKey</code> from its ZIP 316 string …\nFind the Unified Address corresponding to the smallest …\nFind the Unified Address corresponding to the smallest …\nReturns the string encoding of this <code>UnifiedFullViewingKey</code> …\nReturns the string encoding of this <code>UnifiedFullViewingKey</code> …\nSearches the diversifier space starting at diversifier …\nSearches the diversifier space starting at diversifier …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDecodes a <code>UnifiedSpendingKey</code> value from its serialized …\nReturn the intersection of two requirements that chooses …\nConstructs a new unified address request that includes …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a new unified address request from its …\nConstruct a new unified full viewing key.\nConstruct a new unified incoming viewing key.\nParses a <code>UnifiedFullViewingKey</code> from its ZIP 316 string …\nReturns the Sapling extended spending key component of …\nReturns the Sapling diversifiable full viewing key …\nReturns the Sapling IVK, if present.\nConstructs a <code>UnifiedAddressRequest</code> that requires a …\nReturns a binary encoding of this key suitable for …\nDerives a Unified Incoming Viewing Key from this Unified …\nReturns the transparent component of the unified key at the\nReturns the transparent component of the unified key at the\nReturns the Transparent external IVK, if present.\nConstruct a new unified address request from its …\nA Sapling key that provides the capability to view …\nA Sapling extended spending key\nAttempt to produce a payment address given the specified …\nAttempts to produce a valid payment address for the given …\nReturns the internal address corresponding to the smallest …\nAttempts to decrypt the given address’s diversifier with …\nReturns the address with the lowest valid diversifier …\nReturns the payment address corresponding to the smallest …\nReturns the payment address corresponding to the smallest …\nDerives the child key at the given (hardened) index.\nDerives an internal spending key given an external …\nDerives an internal full viewing key used for internal …\nReturns the payment address corresponding to the specified …\nReturns the change address corresponding to the specified …\nSearch the diversifier space starting at diversifier index …\nFinds the next valid payment address starting from the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDecodes the extended spending key from its serialized …\nParses a <code>DiversifiableFullViewingKey</code> from its raw byte …\nReturns the child key corresponding to the path derived …\nExposes the external <code>FullViewingKey</code> component of this …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReads and decodes the encoded form of the extended …\nDerives the ZIP 32 <code>ExtendedSpendingKey</code> for a given coin …\nEncodes the extended spending key to its serialized …\nReturns the raw encoding of this …\nDerives the external diversifiable incoming viewing key …\nReturns the internal <code>FullViewingKey</code> component of this …\nDerives an incoming viewing key corresponding to this full …\nDerives a nullifier-deriving key for the provided scope.\nDerives an outgoing viewing key corresponding to this full …\nWrites the encoded form of the extended spending key as …\nNo anchor information could be obtained for the specified …\nThe input total and output total of the payment request …\nAn attempted double-spend of an output belonging to the …\nA proposal step created an ephemeral output that was not …\nThe change strategy provided to input selection failed to …\nThe total of transaction inputs overflows the valid range …\nThere was a mismatch between the payments in the proposal…\nThe proposal included a payment to a TEX address and a …\nA proposal for a series of transactions to be created.\nErrors that can occur in construction of a <code>Step</code>.\nA reference to the output of a prior step is invalid.\nThe total output value of the transaction request is not a …\nThe Sapling inputs to a proposed transaction.\nThe <code>is_shielding</code> flag may only be set to <code>true</code> under the …\nThe proposal tried to spend a change output. Mark the …\nThe inputs to be consumed and outputs to be produced in a …\nAn attempted double-spend of a prior step output was …\nA reference to the output of a step in a proposal.\nA reference to either a payment or change output within a …\nReturns the anchor height for Sapling inputs that should …\nReturns the change outputs to be added to the transaction …\nReturns the fee rule to be used by the transaction builder.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a <code>ShieldedInputs</code> from its constituent parts.\nConstructs a validated <code>Step</code> from its constituent parts.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether or not this proposal requires interaction …\nReturns a flag indicating whether or not the proposed …\nReturns the target height for which the proposal was …\nConstructs a validated multi-step <code>Proposal</code>.\nConstructs a new <code>StepOutput</code> from its constituent parts.\nReturns the list of Sapling notes to be used as inputs to …\nReturns the identifier for the payment or change output …\nReturns the map from payment index to the pool that has …\nReturns the inputs that should be obtained from the …\nReturns the shielded inputs that have been selected to …\nConstructs a validated <code>Proposal</code> having only a single step …\nReturns the step index to which this reference refers.\nReturns the steps of the proposal. Each step corresponds …\nReturns the transaction request that describes the …\nReturns the transparent inputs that have been selected to …\nThe transaction balance, or a component thereof, failed to …\nAn inputs field for the given protocol was present, but …\nThe fee rule specified by the proposal is not supported by …\nThe unspent note or UTXO corresponding to a proposal input …\nA failure occurred trying to retrieve an unspent note or …\nChange outputs to the specified pool are not supported.\nEphemeral outputs to the specified pool are not supported.\nFailed to decode a ZIP-302-compliant memo from the …\nThe encoded proposal contained no steps.\nA proposed input was null.\nConstant for the V1 proposal serialization version.\nErrors that can occur in the process of decoding a <code>Proposal</code>…\nThe proposal violated balance or structural constraints.\nA memo field was provided for a transparent output.\nA transaction identifier string did not decode to a valid …\nAn invalid value pool identifier was encountered.\nThe serialization version returned by the protobuf was not …\nThe ZIP 321 transaction request URI was invalid.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInformation about the state of the chain as of a given …\nA compact representation of the shielded data in a Zcash …\nA compact representation of an Orchard Action.\nA compact representation of a Sapling Output.\nA compact representation of a Sapling Spend.\nA compact representation of the shielded data in a Zcash …\ninformation about the state of the chain as of this block\nFirst 52 bytes of ciphertext.\n[52] The first 52 bytes of the encCiphertext field\nReturns the note commitment for this output.\nNote commitment u-coordinate.\n[32] The x-coordinate of the note commitment for the …\nReturns the ephemeral public key for this output.\nEphemeral public key.\n[32] An encoding of an ephemeral Pallas public key\nThe transaction fee: present if server can provide. In the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the <code>BlockHash</code> for this block.\nthe ID (hash) of this block, same as in block explorers\nthe ID (hash) of this transaction, same as in block …\nReturns the <code>BlockHeader</code> for this block if present.\n(hash, prevHash, and time) OR (full header)\nReturns the <code>BlockHeight</code> value for this block\nthe height of this block\nIndex and hash will allow the receiver to call out to chain\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNullifier (see the Zcash protocol specification)\n[32] The nullifier of the input note\nthe size of the Orchard note commitment tree as of the end …\nReturns the <code>BlockHash</code> for this block’s parent.\nthe ID (hash) of this block’s predecessor\nthe version of this wire format, for storage\nthe size of the Sapling note commitment tree as of the end …\nUnix epoch time when the block was mined\nReturns the transaction Id\nzero or more compact transactions from this block\nA proposed change or ephemeral output. If the transparent …\nThe fee rule used in constructing a Proposal\nAn object wrapper for memo bytes, to facilitate …\nProtobuf requires that enums have a zero discriminant as …\nThe Orchard value pool\nA mapping from ZIP 321 payment index to the output pool …\nProtobuf requires that enums have a zero discriminant as …\n10000 ZAT\nA reference to a change or ephemeral output from a prior …\nA reference to a payment in a prior step of the proposal. …\nA data structure that describes a series of transactions …\nA data structure that describes the inputs to be consumed …\nThe unique identifier and value for an input to be used in …\nThe unique identifier and value for each proposed input …\nThe Sapling value pool\nThe proposed change outputs and fee value.\nThe transparent value pool (P2SH is not distinguished from …\n1000 ZAT\nMAX(10000, 5000 * logical_actions) ZAT\nThe anchor height to be used in creating the transaction, …\nString value of the enum field names used in the ProtoBuf …\nString value of the enum field names used in the ProtoBuf …\nThe total value, fee value, and change outputs of the …\nThe fee to be paid by the proposed transaction, in …\nReturns the enum value of <code>fee_rule</code>, or the default if the …\nThe fee rule used in constructing this proposal\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>ValuePool</code>, or <code>None</code> if <code>value</code> is not a …\nConverts an <code>i32</code> to a <code>FeeRule</code>, or <code>None</code> if <code>value</code> is not a …\nSerializes a <code>Proposal</code> based upon a supported …\nCreates an enum from field names used in the ProtoBuf …\nCreates an enum from field names used in the ProtoBuf …\nThe inputs to be used in creating the transaction.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this is to be an ephemeral output.\nA flag indicating whether the step is for a shielding …\nReturns <code>true</code> if <code>value</code> is a variant of <code>ValuePool</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>FeeRule</code>.\nThe optional memo that should be associated with the newly …\nThe target height for which the proposal was constructed\nThe vector of selected payment index / output pool …\nA list of change or ephemeral output values.\nNested message and enum types in <code>ProposedInput</code>.\nThe version of this serialization format.\nSets <code>fee_rule</code> to the provided enum value.\nSets <code>value_pool</code> to the provided enum value.\nSets <code>value_pool</code> to the provided enum value.\nSets <code>value_pool</code> to the provided enum value.\nThe series of transactions to be created.\nZIP 321 serialized transaction request\nAttempts to parse a <code>Proposal</code> based upon a supported …\nThe value of a change or ephemeral output to be created, …\nReturns the enum value of <code>value_pool</code>, or the default if …\nReturns the enum value of <code>value_pool</code>, or the default if …\nReturns the enum value of <code>value_pool</code>, or the default if …\nThe value pool in which the change or ephemeral output …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nA BlockID message contains identifiers to select a block: …\nBlockRange specifies a series of blocks from start to end …\nChainspec is a placeholder to allow specification of a …\nDuration is currently used only for testing, so that the …\nEmpty is for gRPCs that take no arguments, currently only …\nResults are sorted by height, which makes it easy to issue …\nLightdInfo returns various information about this …\nPingResponse is used to indicate concurrency, how many …\nRawTransaction contains the complete transaction data. It …\nA SendResponse encodes an error code and a string. It is …\nTransparentAddressBlockFilter restricts the results to the …\nThe TreeState is derived from the Zcash z_gettreestate rpc.\nA TxFilter contains the information needed to identify a …\nt-address\nString value of the enum field names used in the ProtoBuf …\nblock identifier, height or hash\nlatest block on the best chain\neither “main” or “test”\nGenerated client implementations.\nThe hash of the block that completed this subtree.\nThe height of the block that completed this subtree in the …\nprotocol identifier, see consensus/upgrades.cpp\nexact data returned by Zcash ‘getrawtransaction’\nless than tip height if zcashd is syncing\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>ShieldedProtocol</code>, or <code>None</code> if <code>value</code> is …\nCreates an enum from field names used in the ProtoBuf …\ntransaction ID (hash, txid)\nblock id\nheight that the transaction was mined (or -1)\nblock height\nindex within the block\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>ShieldedProtocol</code>.\nMaximum number of entries to return, or 0 for all entries.\nzero means unlimited\n“main” or “test”\norchard commitment tree state\nstart, end heights\nThe 32-byte Merkle root of the subtree.\ndepends on mainnet or testnet\nDeserializes and returns the Sapling note commitment tree …\nsapling commitment tree state\nSets <code>shielded_protocol</code> to the provided enum value.\nReturns the enum value of <code>shielded_protocol</code>, or the …\nShielded protocol to return subtree roots for\nIndex identifying where to start returning subtree roots\ntrue\nUnix epoch time when the block was mined\nParses this tree state into a <code>ChainState</code> for use with …\nexample: “v4.1.1-877212414”\nexample: “/MagicBean:4.1.1/”\nEnable decompressing responses.\nAttempt to create a new client by connecting to a given …\nReturns the argument unchanged.\nReturn the compact block corresponding to the given block …\nSame as GetBlock except actions contain only nullifiers\nReturn a list of consecutive compact blocks\nSame as GetBlockRange except actions contain only …\nReturn the BlockID of the block at the tip of the best …\nReturn information about this lightwalletd instance and …\nReturn a stream of current Mempool transactions. This will …\nReturn the compact transactions currently in the mempool; …\nReturns a stream of information about roots of subtrees of …\nReturn the txids corresponding to the given t-address …\nReturn the requested full (not compact) transaction (as …\nGetTreeState returns the note commitment tree state …\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nTesting-only, requires lightwalletd –ping-very-insecure …\nCompress requests with the given encoding.\nSubmit the given transaction to the Zcash network\nThe block height field of the proposed new block is not …\nThe encoding of a compact Sapling output or compact …\nThe set of nullifiers being tracked by a wallet.\nThe hash of the parent block given by a proposed new chain …\nErrors that may occur in chain scanning\nAn incoming viewing key, paired with an optional nullifier …\nA key that can be used to perform trial decryption and …\nA set of keys to be used in scanning for decryptable …\nWe were provided chain metadata for a block containing …\nThe note commitment tree size for the given protocol at …\nThe size of the note commitment tree for the given …\nReturns the account identifier for this key. An account …\nReturns the block height at which the scan error occurred\nConstructs a new empty set of scanning keys.\nConstructs a new empty set of nullifiers\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a <code>ScanningKeys</code> from an iterator of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether this error is the result of a failed …\nReturns the <code>zip32::Scope</code> for which this key was derived, …\nConstructs a new set of scanning keys.\nProduces the nullifier for the specified note and witness, …\nPrepare the key for use in batch trial decryption.\nReturns the Sapling keys to be used for incoming note …\nReturns the Sapling nullifiers for notes that the wallet …\nScans a <code>CompactBlock</code> with a set of <code>ScanningKeys</code>.\nCreate a fake CompactBlock at the given height, with a …\nSerialization formats for data stored as SQLite BLOBs\nReads a <code>PrunableTree</code> from the provided <code>Read</code> instance.\nWrites a <code>PrunableTree</code> to the provided <code>Write</code> instance.\nAn error while interacting with a <code>BlockCache</code>.\nErrors that can occur while syncing.\nThe lightwalletd server returned invalid information, and …\nAn error while scanning blocks.\nAn error while communicating with the lightwalletd server.\nAn error while interacting with a wallet database via …\nAn error while interacting with a wallet database via …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nScans the chain until the wallet is up-to-date.\nUse custom outgoing viewing keys. These might for instance …\nUse no outgoing viewing keys. Transaction outputs will be …\nAn enumeration of supported shielded note types for use in …\nA unique identifier for a shielded transaction output\nDescribes a policy for which outgoing viewing key should …\nInformation about a note that is tracked by the wallet …\nA type that represents the recipient of a transaction …\nUse the outgoing viewing key from the sender’s …\nMetadata related to the ZIP 32 derivation of a transparent …\nAn output that was successfully decrypted in the process …\nA subset of an <code>OutputDescription</code> relevant to wallets and …\nA type alias for Sapling <code>WalletSpend</code>s.\nA reference to a spent note belonging to the wallet within …\nThe shielded subset of a <code>Transaction</code>’s data that is …\nReturns the identifier to the account_id to which the note …\nThe identifier for the account to which the output belongs.\nReturns the index of the transaction in the containing …\nConstructs an <code>OvkPolicy::Custom</code> value from a single …\nThe <code>EphemeralKeyBytes</code> used in the decryption of the note.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a <code>WalletSpend</code> from its constituent parts.\nConstructs a new <code>WalletOutput</code> value from its constituent …\nReturns the index of the Sapling spend or Orchard action …\nThe index of the output or action in the transaction that …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA flag indicating whether the process of note decryption …\nMap over the <code>note</code> field of this data structure.\nConstructs a new <code>WalletTx</code> from its constituent parts.\nConstructs a new <code>NoteId</code> from its parts.\nReturns a <code>TransparentAddressMetadata</code> in the given scope …\nReturns the nullifier of the spent note.\nThe nullifier for the note, if the key used to decrypt the …\nThe note.\nThe position of the note in the global note commitment …\nReturns the index of this note within its transaction’s …\nReturns the shielded protocol used by this note.\nReturns the shielded protocol used by this note.\nThe ZIP 32 scope for which the viewing key that decrypted …\nReturns a record for each Sapling note received or …\nReturns a record for each Sapling note belonging to the …\nReturns the <code>TxId</code> for the corresponding <code>Transaction</code>.\nReturns the ID of the transaction containing this note.\nParsing encountered a duplicate ZIP 321 URI parameter for …\nA memo field in the ZIP 321 URI was not properly base-64 …\nA memo value exceeded 512 bytes in length or could not be …\nThe ZIP 321 URI was malformed and failed to parse.\nA single payment being requested.\nThe payment at the wrapped index did not include a …\nThe ZIP 321 request included more payments than can be …\nA ZIP321 transaction request.\nThe payment at the wrapped index attempted to include a …\nErrors that may be produced in decoding of payment …\nReturns the value of the payment that is being requested, …\nConstructs a new empty transaction request.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a new transaction request from the provided map …\nParse the provided URI to a payment request value.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA human-readable label for this payment within the larger …\nReturns the memo that, if included, must be provided with …\nParse a <code>MemoBytes</code> value from a ZIP 321 compatible …\nConverts a <code>MemoBytes</code> value to a ZIP 321 compatible …\nA human-readable message to be displayed to the user …\nConstructs a new <code>Payment</code> from its constituent parts.\nConstructs a new transaction request that obeys the …\nA list of other arbitrary key/value pairs associated with …\nReturns the map of payments that make up this request.\nReturns the payment address to which the payment should be …\nConvert this request to a URI string.\nReturns the total value of payments to be made.\nConstructs a new <code>Payment</code> paying the given address the …")