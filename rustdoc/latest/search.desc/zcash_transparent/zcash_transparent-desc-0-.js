searchState.loadedDescShard("zcash_transparent", 0, "Zcash transparent protocol\nSupport for legacy transparent addresses and scripts.\nTypes and functions for building transparent transaction …\nStructs representing the components within Zcash …\nTransparent key components.\nPCZT support for transparent Zcash.\nA serialized script, used inside transparent inputs and …\nA transparent address corresponding to either a public key …\nReturns the address that this Script contains, if any.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerate the <code>scriptPubKey</code> corresponding to this address.\nReturns the length of this script as encoded (including …\nA bundle could not be built because a required signing …\nA set of transparent signing keys.\nAdds a coin (the output of a previous transaction) to be …\nAdds a signing key to the set.\nBuilds a bundle containing the given inputs and outputs, …\nConstructs a new TransparentBuilder\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the list of transparent inputs that will be …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs an empty set of signing keys.\nReturns the transparent outputs that will be produced by …\nMarker type for a bundle that contains no authorizing …\nConstructs a fake <code>OutPoint</code> for use in tests.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the byte representation of the txid of the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this bundle matches the definition of a …\nReturns the output index of this <code>OutPoint</code>.\nConstructs an <code>OutPoint</code> for the output at index <code>n</code> in the …\nReturns the address to which the TxOut was sent, if this …\nReturns the txid of the transaction containing this …\nThe amount of value added to or removed from the …\nA BIP44 private key at the account path level …\nA BIP44 public key at the account path level …\nThe scope used to derive keys for ephemeral transparent …\nThe scope used to derive keys for external transparent …\nAn incoming viewing key at the “ephemeral” path …\nAn incoming viewing key at the BIP44 “external” path …\nExternal outgoing viewing key used by <code>zcashd</code> for …\nThe scope used to derive keys for internal wallet …\nTrait representing a transparent “incoming viewing key”…\nAn incoming viewing key at the BIP44 “internal” path …\nInternal outgoing viewing key used for autoshielding.\nA child index for a derived transparent address.\nThe scope of a transparent key.\nReturns an arbitrary custom <code>TransparentKeyScope</code>.\nSearches the space of child indexes for an index that will …\nDerives a transparent address at the provided child index.\nDerives the BIP44 public key at the “address level” …\nDerives a transparent address at the provided child index.\nDerives the public key at the “ephemeral” path …\nDerives the BIP44 public key at the external “change …\nDerives the BIP44 private spending key for the external …\nDerives the BIP44 public key at the internal “change …\nDerives the BIP44 private spending key for the internal …\nDerives the public key corresponding to the given full BIP …\nDerives the BIP44 private spending key for the child path …\nDerives the external ovk corresponding to this transparent …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDecodes the <code>AccountPrivKey</code> from the encoding specified for …\nParses the given ZIP 32 child index.\nPerforms derivation of the extended private key for the …\nReturns the index as a 32-bit integer.\nDerives the internal ovk corresponding to this transparent …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDerives the internal ovk and external ovk corresponding to …\nDerives the P2PKH transparent address corresponding to the …\nReturns the <code>AccountPrivKey</code> serialized using the encoding …\nThe BIP 32 derivation path at which a key can be found.\nPCZT fields that are specific to producing the transaction…\nInformation about a transparent spend within a transaction.\nAn updater for a transparent PCZT input.\nAn out-of-bounds index was provided when looking up an …\nAn invalid <code>sighash_type</code> was provided.\nAn invalid <code>value</code> was provided.\nThe Transaction Extractor role requires all <code>script_sig</code> …\n<code>partial_signatures</code> contained no signatures.\nA <code>redeem_script</code> can only be set on a P2SH coin.\nA <code>redeem_script</code> can only be set on a P2SH coin.\nInformation about a transparent output within a …\nAn updater for a transparent PCZT output.\nErrors that can occur while parsing a PCZT bundle.\nErrors that can occur while signing a transparent input in …\nErrors that can occur while finalizing the transparent …\nErrors that can occur while extracting a regular …\nAuthorizing data for a transparent bundle in a transaction …\n<code>partial_signatures</code> contained unexpected signatures.\nThe <code>script_pubkey</code> kind is unsupported.\nThe <code>script_pubkey</code> kind is unsupported.\nAn updater for a transparent PCZT bundle.\nErrors that can occur while signing a transparent input in …\nErrors that can occur while verifying a PCZT bundle.\nThe provided <code>redeem_script</code> does not match the input’s …\nThe provided <code>redeem_script</code> does not match the input’s …\nThe provided <code>sk</code> does not match any pubkey involved with …\nA map from a pubkey to the BIP 32 derivation path at which …\nA map from a pubkey to the BIP 32 derivation path at which …\nProvides read access to the bundle being updated.\nThe sequence of indices corresponding to the HD path.\nExtracts a fully authorized regular <code>Bundle</code> from this PCZT …\nExtracts the BIP 44 account index, scope, and address …\nExtracts the effects of this PCZT bundle as a regular …\nFinalizes the spends for this bundle.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMappings of the form <code>key = RIPEMD160(SHA256(value))</code>.\nMappings of the form <code>key = SHA256(SHA256(value))</code>.\nThe transparent inputs in this bundle.\nReturns a mutable reference to the inputs in this bundle.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe transparent outputs in this bundle.\nParses a PCZT bundle from its component parts.\nParses a PCZT input from its component parts.\nParses a PCZT output from its component parts.\nParses a BIP 32 derivation path from its component parts.\nA map from a pubkey to a signature created by it.\nThe index of the entry in the <code>vout</code> field of the previous …\nThe ID of the previous transaction containing the …\nProprietary fields related to the transparent coin being …\nProprietary fields related to the transparent coin being …\nThe script required to spend this output, if it is P2SH.\nThe script required to spend this output, if it is P2SH.\nThe minimum block height that this input requires to be …\nThe minimum Unix timstamp that this input requires to be …\nMappings of the form <code>key = RIPEMD160(value)</code>.\nThe <code>script_pubkey</code> of the input being spent.\nThe script constraining how spending of this output must …\nA satisfying witness for the <code>script_pubkey</code> of the input …\nThe ZIP 32 seed fingerprint.\nThe sequence number of this input.\nSets the BIP 32 derivation path for the given pubkey.\nSets the BIP 32 derivation path for the given pubkey.\nStores the given value along with …\nStores the given value along with …\nStores the given proprietary value at the given key.\nStores the given proprietary value at the given key.\nSets the redeem script for this input.\nSets the redeem script for this output.\nStores the given value along with <code>key = RIPEMD160(value)</code>.\nStores the given value along with <code>key = SHA256(value)</code>.\nSets the user-facing address that the new note is being …\nMappings of the form <code>key = SHA256(value)</code>.\nThe sighash type to be used for this input.\nSigns the transparent spend with the given spend …\nUpdates the input at the given index with information …\nUpdates the input at the given index with information …\nUpdates the bundle with information provided in the given …\nThe user-facing address to which this output is being …\nThe value of the input being spent.\nThe value of the output.\nVerifies the consistency of this transparent input.\nVerifies the consistency of this transparent output.\nA ZIP 244 sighash type.\nA transparent input that is signable because we know its …\nAdditional context that is needed to compute signature …\nEncodes this <code>SighashType</code> using the ZIP 244 rules.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a signable input from its parts.\nReturns the list of all transparent input amounts, provided\nReturns the list of all transparent input scriptPubKeys, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParses the given <code>hash_type</code> using the ZIP 244 rules.")