searchState.loadedDescShard("zcash_history", 0, "Chain history library for Zcash\nMMR Entry.\nMMR Node. It is leaf when <code>left</code>, <code>right</code> are <code>None</code> and node …\nReference to the tree node.\nCrate-level error type\nEntry expected to be presented in the tree view while it …\nEntry expected to be a node (specifying for which link …\nReference to the generated leaf/node.\nLeaf entry.\nMax serialized length of entry data.\nMaximum serialized size of the node metadata.\nNode entry with children links.\nV1 node metadata.\nThe node data for this tree version.\nReference to the stored (in the array representation) …\nRepresents partially loaded tree.\nVersion 1 of the Zcash chain history tree.\nVersion 2 of the Zcash chain history tree.\nA version of the chain history tree.\nAppend one leaf to the tree.\nCombines two nodes’ metadata.\nCombines two nodes’ metadata.\nCombine two nodes metadata.\nCombines two nodes metadata.\nReturns if is this node complete (has total of 2^N leaves)\nReturns the consensus branch ID for the given node data.\nConsensus branch id, should be provided by deserializing …\nReturns the data associated with this node.\nReturns the end height for the given node data.\nEnd height\nEnd sapling tree root.\nEnd target.\nEnd time.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from byte representation.\nConvert from byte representation.\nConvert from byte representation.\nConvert from byte representation.\nHash node metadata\nHash node metadata\nHash node metadata\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf this tree is empty.\nIs this node a leaf.\nNumber of leaves under this node.\nLeft child\nLength of array representation of the tree.\nEntry expected to be a node (specifying for which link …\nNew view into the tree array representation\nNew entry of type node.\nCreates a new leaf.\nSome entry is expected to be node\nParses node data from the given reader.\nRead from byte representation.\nRead from the byte representation.\nResolve link originated from this tree\nRight child.\nLink to the root node\nReference to the root node.\nNumber of Sapling transactions.\nReturns the start height for the given node data.\nStart height.\nStart sapling tree root.\nStart target.\nStart time.\nSubtree commitment - either block hash for leaves or …\nPart of tree total work.\nConverts to byte representation.\nConverts to byte representation.\nConvert to byte representation.\nTruncate one leaf from the end of the tree.\nWrites the byte representation of the given node data to …\nWrite to byte representation.\nWrite to the byte representation.")