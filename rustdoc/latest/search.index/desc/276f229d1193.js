rd_("CgReturns the output index of this <code>OutPoint</code>.0BmThe height of the genesis block on a network.BaThe type of inputs to the bundle.0BhWrapper for errors from the IO subsystemBjVersion 1 of the Zcash chain history tree.BjVersion 2 of the Zcash chain history tree.CfTransaction version 3, which was introduced by the \xe2\x80\xa6CnTransaction version 4, which was introduced by the Sapling \xe2\x80\xa6CjTransaction version 5, which was introduced by the NU5 \xe2\x80\xa6CjProduces metadata for a block as of the given chain state.DiTests for equality between two <code>MemoryWalletDb</code> instances. \xe2\x80\xa6BnReturns the unique identifier for the account.BeReturns the nullifier for this spend.CcReturns the nullifier for the spend of this action.C`nullifier (see the Zcash protocol specification)CnProduces the nullifier for the specified note and witness, \xe2\x80\xa6BhReturns the nullifier of the spent note.CnThe nullifier for the note, if the key used to decrypt the \xe2\x80\xa6BaReturns the raw transaction data.BfReturns the transaction that was sent.CkBoth mined transactions and transactions in the mempool \xe2\x80\xa6CmAll transactions corresponding to the data request should \xe2\x80\xa6CmA version identifier for the encoding of unified spending \xe2\x80\xa60CjAn error occurred in computing the fees for a transaction.BgThe set of known FVKs for Unified FVKs.BgThe set of known IVKs for Unified IVKs.ChA secp256k1 secret key, along with a flag indicating \xe2\x80\xa60BkThe maximum valid non-hardened child index.CgA policy to use the minimum number of confirmations \xe2\x80\xa6AhThe Nu5 network upgrade.DaThe consensus rules deployed by <code>NetworkUpgrade::Nu5</code>.AhThe Nu6 network upgrade.DaThe consensus rules deployed by <code>NetworkUpgrade::Nu6</code>.BaThe type of inputs of the bundle.0CnA ZIP 320 transparent-source-only P2PKH address, or \xe2\x80\x9cTEX \xe2\x80\xa60BlReturns the note commitment for this output.Alnote commitment u-coordinateCjReturns the note commitment for the output of this action.Ch[32] The x-coordinate of the note commitment for the \xe2\x80\xa6CfReturns the number of steps completed so far while \xe2\x80\xa6CjReturns the total expected number of steps before this \xe2\x80\xa6CnThe transaction fee: present if server can provide. In the \xe2\x80\xa6EfReturns the value of <code>fee</code>, or the default value if <code>fee</code> is \xe2\x80\xa6DfExposes the external <code>FullViewingKey</code> component of this \xe2\x80\xa60BoReturns the number of blocks in the scan range.BkLength of array representation of the tree.CcInstantiates the Verifier role with the given PCZT.CbInstantiates the Updater role with the given PCZT.CcInstantiates the Redactor role with the given PCZT.CkInstantiates the low-level Signer role with the given PCZT.CdInstantiates the Combiner role with the given PCZTs.DkConstructs a new <code>DecryptedTransaction</code> from its constituent \xe2\x80\xa6DfConstructs a new <code>SentTransaction</code> from its constituent \xe2\x80\xa6CkConstructs new derivation metadata from its constituent \xe2\x80\xa6CjConstructs a new Ratio from a numerator and a denominator.CkConstructs a new progress value from its constituent parts.DgConstructs a new <code>WalletSummary</code> from its constituent parts.DfConstruct a new <code>ReceivedNotes</code> from its constituent parts.DdConstructs a new <code>WalletUtxo</code> from its constituent parts.DhConstructs a new <code>PoolMeta</code> value from its constituent parts.DhConstructs a new <code>AccountMeta</code> value from its constituent \xe2\x80\xa6CnCreates a <code>BoundedU8</code> from a <code>u8</code> value.DiConstructs a new <code>SpendingKeys</code> value from its constituent \xe2\x80\xa6EcConstructs a new <code>ConfirmationsPolicy</code> with <code>trusted</code> and \xe2\x80\xa6ChConstructs a new greedy input selector that uses the \xe2\x80\xa6DcConstruct a new <code>ChainState</code> from its constituent parts.BjConstructs a new test environment builder.BiConstructs a new mock wallet data source.CgConstructs a new fake output with the given properties.CdConstructs a new balance from its constituent parts.BdConstructs a new dust output policy.DeConstructs a new <code>SingleOutputChangeStrategy</code> with the \xe2\x80\xa6DdConstructs a new <code>MultiOutputChangeStrategy</code> with the \xe2\x80\xa6DdConstructs a new <code>StepOutput</code> from its constituent parts.BfConstructs a new set of scanning keys.CdConstructs a new <code>NoteId</code> from its parts.DbConstructs a new <code>WalletTx</code> from its constituent parts.DkConstructs a new <code>TransparentAddressMetadata</code> value from its \xe2\x80\xa6CdConstruct a new unified address request from its \xe2\x80\xa6BiConstruct a new unified full viewing key.BmConstruct a new unified incoming viewing key.CkConstructs a new key value from a secret key and a flag \xe2\x80\xa6DaConstructs a new <code>Payment</code> from its constituent parts.CgConstructs a new transaction request that obeys the \xe2\x80\xa6CbConstructs a new empty <code>MemBlockCache</code>.DgConstructs a new <code>FixedClock</code> with the given time as the \xe2\x80\xa6BaConstructs a new wallet migrator.BkNew view into the tree array representationAgNew entry of type node.:987DjCreates a new <code>Builder</code> targeted for inclusion in the block \xe2\x80\xa6EeConstructs an <code>OutPoint</code> for the output at index <code>n</code> in the \xe2\x80\xa6BhConstructs an empty set of signing keys.EdConstruct a new <code>HashReader</code> given an existing <code>reader</code> by \xe2\x80\xa6DhCreates a <code>LocalTxProver</code> using parameters from the given \xe2\x80\xa632;:CiReturns the current system time, according to this clock.EfReturns the value of <code>rho</code>, or the default value if <code>rho</code> is \xe2\x80\xa6BoScans the chain until the wallet is up-to-date.BmReturns the account\xe2\x80\x99s unified spending key.Cazero or more compact transactions from this blockBkThe type of item in this unified container.CkTrait for unified items, exposing specific methods on them.kLeaf entry.nZcash Mainnet.0CmAn unencrypted memo received alongside a shielded note in \xe2\x80\xa6AoNode entry with children links.CnAn enumeration of supported shielded note types for use in \xe2\x80\xa6CmNo receiver of the associated type may be included in the \xe2\x80\xa60AkA transparent P2SH address.BfA partially-created Zcash transaction.AoAn error while scanning blocks.CmA block that was received violated rules related to chain \xe2\x80\xa6CmThe inputs to be consumed and outputs to be produced in a \xe2\x80\xa6nZcash Testnet.0BgA memo field containing a UTF-8 string.BaRepresents partially loaded tree.BiUnique identifier for a zcash transactionBgThe identifier for a Zcash transaction.0AkA Unified Full Viewing Key.AoA Unified Incoming Viewing Key.BoA conversion error returned by the target type.DeThe <code>Balance</code> value having zero values for all its fields.0BjReturns the identity <code>Zatoshis</code>BkThe minimum valid non-hardened child index.B`The previous output being spent.CgThe serialized representation of the Zcash transaction.BkReturns the data associated with this node.CiConstructs a fake <code>OutPoint</code> for use in tests.0CcAbstractions and types related to fee calculations.AoReturns the argument unchanged.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000BmSerializes the <code>Memo</code> per ZIP 302.101111111111111111111111111111111111111111111111Aktransaction ID (hash, txid)hblock idCbReturns the <code>BlockHash</code> for this block.Cgthe ID (hash) of this block, same as in block explorersCgthe ID (hash) of this transaction, same as in block \xe2\x80\xa61AbHash node metadata00B`Returns the hash of this header.CfReturns the byte representation of the txid of the \xe2\x80\xa60CaFunctions for initializing the various databases.0BaCalls <code>U::from(self)</code>.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ChHelper functions for managing light client key material.AkTransparent key components.DfReturns the enum value of <code>kind</code>, or the default if the \xe2\x80\xa6Acderived or importedAdIs this node a leaf.jLeft childBfThe memo bytes included with the note.CmReturns the memo that was attached to the output, if any. \xe2\x80\xa6CbReturns the memo to be associated with the output.CnThe optional memo that should be associated with the newly \xe2\x80\xa6CmReturns the memo that, if included, must be provided with \xe2\x80\xa6BeStructs for handling encrypted memos.1CkReturns the human-readable name for the account, if any \xe2\x80\xa6BdReturns the successor to this index.CmProduces metadata for a block \xe2\x80\x9cbefore shielded time\xe2\x80\x9d, \xe2\x80\xa6AkThe note within the output.iThe note.AfReturns the note data.Akthe note if InternalAccountCfThe Partially Created Zcash Transaction (PCZT) format.BcPCZT support for transparent Zcash.CmTesting-only, requires lightwalletd \xe2\x80\x93ping-very-insecure \xe2\x80\xa6DfReturns the enum value of <code>pool</code>, or the default if the \xe2\x80\xa6CnRetrieves contiguous compact blocks specified by the given \xe2\x80\xa6CfReads and decodes the encoded form of the extended \xe2\x80\xa6BiReads an integer encoded in compact form.CdReads a vector, assuming the encoding written by \xe2\x80\xa6DkReads <code>count</code> elements from a stream into a vector, assuming \xe2\x80\xa6CmReads an optional value, assuming the encoding written by \xe2\x80\xa6BgParses node data from the given reader.AnRead from byte representation.BbRead from the byte representation.7BiParses a node from the given byte source.CgReads a 32-byte txid directly from the provided reader.0AeLink to the root nodeChReturns the progress the wallet has made in scanning \xe2\x80\xa6CdSigns the transparent spend with the given spend \xe2\x80\xa60CkImplementation of the synchronization flow described in \xe2\x80\xa6DkUpdates the current time held by this <code>FixedClock</code> by adding \xe2\x80\xa6BhUnix epoch time when the block was mined0AoReturns the transaction\xe2\x80\x99s ID.AjReturns the transaction IdCgReturns the ID of the transaction containing this note.DmReturns the <code>TxId</code> for the corresponding <code>Transaction</code>.ClReturns the txid of the transaction that constructed the \xe2\x80\xa6CgReturns the txid of the transaction containing this \xe2\x80\xa60CkReturns the UFVK that the wallet backend has stored for \xe2\x80\xa6CkReturns the UIVK that the wallet backend has stored for \xe2\x80\xa6CnTypes that should be part of the standard library, but aren\xe2\x80\xa6BaReturns a zero-valued ZatBalance.CdThe associated receiver should be included, if a \xe2\x80\xa60CjNamespace for functions that perform encoding of array \xe2\x80\xa6CjErrors that occur when a decoded binary value does not \xe2\x80\xa60CjAn error while interacting with a <code>BlockCache</code>.CmA trait that represents the capability to read the system \xe2\x80\xa6CmEmpty is for gRPCs that take no arguments, currently only \xe2\x80\xa6AdAn empty memo field.jMMR Entry.BfAn Equihash solution failed to verify.AlErrors produced by F4Jumble.BlErrors that can occur while combining PCZTs.CnConversion errors for the user type (e.g. failing to parse \xe2\x80\xa60C`The type of errors produced by a wallet backend.ClThe type of errors that may be generated when querying a \xe2\x80\xa6CkThe type of errors that may be generated in input selection0BdErrors that can occur while syncing.CdErrors that can occur as a consequence of wallet \xe2\x80\xa6C`Errors related to chain validation and scanning.DaErrors that can appear in SQLite-back <code>ShardStore</code> \xe2\x80\xa6AfCrate-level error typeCfErrors that can occur during transaction construction.CjErrors that may result from attempting to construct an \xe2\x80\xa6CiThe address exists within an address gap of the given \xe2\x80\xa6CkInformation about a transparent input within a transaction.CkInformation about a transparent spend within a transaction.0AgThe txin size is known.BkOnly mined transactions should be returned.CmThe requested transaction ID corresponds to a transaction \xe2\x80\xa6AjThe Nu6.1 network upgrade.DcThe consensus rules deployed by <code>NetworkUpgrade::Nu6_1</code>.CnSome other unexpected violation of database business rules \xe2\x80\xa6CnA pruned version of the extended public key for the BIP 44 \xe2\x80\xa60ChA transparent P2PKH address, FVK, or IVK encoding as \xe2\x80\xa6BmErrors encountered querying stored shard dataCgA polymorphic ratio type, usually used for rational \xe2\x80\xa6CiTrait method exposing the ability to reset the wallet \xe2\x80\xa6CfInformation about the spend part of an Orchard action.CgInformation about a Sapling spend within a transaction.B`block identifier, height or hashEgReturns the value of <code>block</code>, or the default value if <code>block</code> \xe2\x80\xa6CeStructs and methods for handling Zcash block headers.AoBuilds the state for this test.CgBuilds a transaction from the configured spends and \xe2\x80\xa6DhExposes an immutable reference to the test\xe2\x80\x99s <code>BlockSource</code>.BnTools for blockchain validation &amp; scanningCmFunctions for enforcing chain validity and handling chain \xe2\x80\xa6CaConstruct a new empty <code>ReceivedNotes</code>.BbConstruct a new empty chain state.BlConstructs a new empty set of scanning keys.BhConstructs a new empty set of nullifiersBkConstructs a new empty transaction request.BcConstructs a new TransparentBuilderDdCreates a <code>MemoBytes</code> indicating that no memo is present.12B`Types for wallet error handling.BhTypes for chain scanning error handling.CkError types for problems that may arise when reading or \xe2\x80\xa6BaThe flags for the Orchard bundle.CnThe index of the output within the shielded outputs of the \xe2\x80\xa6Afindex within the blockCkIndex and hash will allow the receiver to call out to chainClReturns the index of the Sapling spend or Orchard action \xe2\x80\xa6CmThe index of the output or action in the transaction that \xe2\x80\xa6BfReturns the index as a 32-bit integer.CmReturns the items contained within this container, sorted \xe2\x80\xa60CmA human-readable label for this payment within the larger \xe2\x80\xa60Ahmap from note id to memoCiDecodes an instance of the message from a buffer, and \xe2\x80\xa6CmReturns the list of Sapling notes to be used as inputs to \xe2\x80\xa6DiReturns the <code>ReceiverRequirement</code> for inclusion of a P2PKH \xe2\x80\xa60B`Parses a PCZT from its encoding.DgParses a <code>UnifiedFullViewingKey</code> from its ZIP 316 string \xe2\x80\xa60BnParses a PCZT bundle from its component parts.BmParses a PCZT input from its component parts.BnParses a PCZT output from its component parts.CiParses a BIP 32 derivation path from its component parts.3210D`Parses the given <code>hash_type</code> using the ZIP 244 rules.CjThis module contains generated code for handling light \xe2\x80\xa6Abstart, end heightsEhReplaces the wallet in <code>st</code> (via <code>TestState::wallet_mut</code>) with \xe2\x80\xa6CnResets the wallet using a new wallet database but with the \xe2\x80\xa6lRight child.BbImplementations of the PCZT roles.BcThe seed randomness for the output.0DhReturns the <code>TransparentKeyScope</code> of the private key from \xe2\x80\xa60DkPrepares and executes the given <code>zip321::TransactionRequest</code> \xe2\x80\xa6BmThe path to the Sapling spend parameter file.ClReturns the steps of the proposal. Each step corresponds \xe2\x80\xa6BiThe series of transactions to be created.ChDerives a nullifier-deriving key for the provided scope.0ChReturns the total value of funds represented by this \xe2\x80\xa6CnReturns the total value of economically relevant notes and \xe2\x80\xa6CjReturns the sum of the proposed change outputs and the \xe2\x80\xa6BoReturns the total value of payments to be made.0Bjfor the GetStatus and Enhancement variantsBfReturns the transaction output itself.0AhThe value of the output.0BnReturns the value of the newly created output.AmReturns the value of the UTXOCmReturns the total value of unspent outputs in the account \xe2\x80\xa6BjReturns the wrapped <code>u8</code> value.B`Returns the value of the output.CmReturns the value of the change or ephemeral output to be \xe2\x80\xa6BcThe value of the input being spent.BgThe value of the output being produced.10ClThe value of a change or ephemeral output to be created, \xe2\x80\xa6729BnReturns the value of the output being created.3:CkWrites the encoded form of the extended spending key as \xe2\x80\xa6DjWrites the provided <code>usize</code> value to the provided Writer in \xe2\x80\xa6DhWrites a slice of values by writing <code>CompactSize</code>-encoded \xe2\x80\xa6CdWrites an iterator full of values to a stream by \xe2\x80\xa6CjWrites an optional value to a stream by writing a flag \xe2\x80\xa6ClWrites the byte representation of the given node data to \xe2\x80\xa6AmWrite to byte representation.BaWrite to the byte representation.7AeSerializes this node.CkWrites the 32-byte payload directly to the provided writer.0Ai<em>Zcash Rust APIs.</em>CiInformation about an Orchard action within a transaction.BeErrors that occur in base58 decoding.0CmPCZT fields that are specific to producing the transaction\xe2\x80\xa60000AkThe Canopy network upgrade.DdThe consensus rules deployed by <code>NetworkUpgrade::Canopy</code>.ClAn error in change selection during transaction proposal \xe2\x80\xa600000ClAn error occurred in computing the change or fee for the \xe2\x80\xa61CnUse custom outgoing viewing keys. These might for instance \xe2\x80\xa6DfSome unknown memo format from \xe2\x9c\xa8<em>the future</em>\xe2\x9c\xa8 that we can\xe2\x80\xa6CkGlobal fields that are relevant to the transaction as a \xe2\x80\xa6ChA handle that confers ownership of a specific wallet \xe2\x80\xa6CeA unique identifier for a shielded transaction outputCcInformation about a transparent output within a \xe2\x80\xa6CgInformation about the output part of an Orchard action.ChInformation about a Sapling output within a transaction.22CkDo not allow creation of dust outputs; instead, require \xe2\x80\xa6CkA serialized script, used inside transparent inputs and \xe2\x80\xa6CdUse the outgoing viewing key from the sender\xe2\x80\x99s \xe2\x80\xa6CjAn error while communicating with the lightwalletd server.CdTransaction versions allowed prior to Overwinter \xe2\x80\xa6BkThe consensus rules at the launch of Zcash.CiReference to the stored (in the array representation) \xe2\x80\xa6CkA newtype wrapper for sqlite primary key values for the \xe2\x80\xa6CiNamespace for functions that perform encoding of vectors.CmA previously scanned range that must be verified to check \xe2\x80\xa6Ci/ A previously scanned range that must be verified to \xe2\x80\xa6CiAn error while interacting with a wallet database via \xe2\x80\xa6CjAn error that was produced by wallet operations in the \xe2\x80\xa6h1000 ZATBfMAX(10000, 5000 * logical_actions) ZATCfThe proposal results in an invalid payment request \xe2\x80\xa6C`The ZIP 321 transaction request URI was invalid.CnReturns the action to take in the event that a dust change \xe2\x80\xa6CmReturns the value of the payment that is being requested, \xe2\x80\xa60BhThe Orchard anchor for this transaction.BhThe Sapling anchor for this transaction.Bcmap from block height to block dataCaProvides read access to the bundle being updated.CdStructs representing the components within Zcash \xe2\x80\xa61AlThe common fields of a PCZT.CmReturns an arbitrary custom <code>TransparentKeyScope</code>.BoDecodes a unified container from its string \xe2\x80\xa60EgAttempts to decode an <code>Address</code> value from its <code>ZcashAddress</code> \xe2\x80\xa6CgDecodes a Zcash address from its string representation.DgParses a <code>UnifiedFullViewingKey</code> from its ZIP 316 string \xe2\x80\xa602100CgDeletes a range of compact blocks from the block cache.CfEncodes this Zcash address in its canonical string \xe2\x80\xa6ChEncodes the contents of the unified container to its \xe2\x80\xa60DkReturns the string encoding of this <code>UnifiedAddress</code> for the \xe2\x80\xa6DhConverts this <code>Address</code> to its encoded string representation.B`Encodes the message to a buffer.AgEncode a Zcash address.DjReturns the string encoding of this <code>UnifiedFullViewingKey</code> \xe2\x80\xa60CnEncode a memory wallet db as a protobuf byte buffer Always \xe2\x80\xa654211BmSerializes the <code>Memo</code> per ZIP 302.CnEncodes this <code>SighashType</code> using the ZIP 244 rules.CgFinishes the Verifier role, returning the updated PCZT.CfFinishes the Updater role, returning the updated PCZT.ChFinishes the Redactor role, returning the redacted PCZT.CmFinishes the low-level Signer role, returning the updated \xe2\x80\xa6CkGlobal fields that are relevant to the transaction as a \xe2\x80\xa6CoReturns the <code>BlockHeader</code> for this block if present.Bk(hash, prevHash, and time) OR (full header)CaReturns the height of the block that was scanned.BkReturns the birthday height of the account.BaReturns the height of this block.CfThe height at which the transaction is mined, or a \xe2\x80\xa6lblock heightCiReturns the <code>BlockHeight</code> value for this blockAhthe height of this block0BaReturns the inputs to the bundle.0CbThe inputs to be used in creating the transaction.CgReturns the list of transparent inputs that will be \xe2\x80\xa6BfThe transparent inputs in this bundle.10CeInserts a vec of compact blocks into the block cache.BiInserts a CompactBlock into the cache DB.BnThe path to the Sapling output parameter file.CnReturns the network parameters that this walletdb instance \xe2\x80\xa6ClReturns the network parameters that the builder has been \xe2\x80\xa6CkAbstractions over the proving system and parameters for \xe2\x80\xa6CiDerives the secp256k1 public key corresponding to the \xe2\x80\xa60CmConstructs a new random fake external output to the given \xe2\x80\xa6EhReturns the value of <code>raw_tx</code>, or the default value if <code>raw_tx</code>\xe2\x80\xa6CiReads an integer encoded in contact form and performs \xe2\x80\xa6DeGenerate the <code>scriptPubKey</code> corresponding to this address.BiReturns the wrapped secp256k1 secret key.0ClReturns whether this account is derived or imported, and \xe2\x80\xa6BlReturns the source metadata for the address.0CdStructs representing the components within Zcash \xe2\x80\xa6BnAPIs for creating and verifying Sprout proofs.B`The \xe2\x80\x9chybrid Sprout\xe2\x80\x9d circuit.CnDerives an incoming viewing key corresponding to this full \xe2\x80\xa60CnDerives an outgoing viewing key corresponding to this full \xe2\x80\xa60BeConvert this request to a URI string.0CcVerifies the consistency of this transparent input.CdVerifies the consistency of this transparent output.10CjStructs representing transaction data scanned from the \xe2\x80\xa6CnFunctions for creating Zcash transactions that spend funds \xe2\x80\xa6DfExposes an immutable reference to the test\xe2\x80\x99s <code>DataStore</code>.CjFunctions for querying information in the wallet database.CkChange strategies designed to implement the ZIP 317 fee \xe2\x80\xa6DiTypes related to implementing a <code>FeeRule</code> provides ZIP 317 \xe2\x80\xa6ChReference implementation of the ZIP-321 standard for \xe2\x80\xa6CfThe concrete account type used by this wallet backend.CiA set of capabilities that a client account must provide.DaAn account stored in a <code>zcash_client_sqlite</code> database.AbA Unified Address.ChAn error occurred parsing the address from a payment \xe2\x80\xa60000000BeAn address that funds can be sent to.0CeA note will be selected if it satisfies the first \xe2\x80\xa6CmAn intermediate value overflowed or underflowed the valid \xe2\x80\xa6CnBalance information for a value within a single pool in an \xe2\x80\xa6CjAn overflow or underflow occurred when computing value \xe2\x80\xa6ChAn overflow or underflow of amount computation occurred.BeA handle for the SQLite block source.CmA BlockID message contains identifiers to select a block: \xe2\x80\xa6AlThe Blossom network upgrade.DeThe consensus rules deployed by <code>NetworkUpgrade::Blossom</code>.BmAn error occurred building a new transaction.000000DaGenerates a <code>Transaction</code> from its inputs and outputs.CgA note will be selected if it satisfies both of the \xe2\x80\xa6AlWrapper for rusqlite errors.0BeAn account derived from a known seed.CiThe address was produced by HD derivation via a known \xe2\x80\xa6ClBIP 44 path derivation information for the address below \xe2\x80\xa6CmUse no outgoing viewing keys. Transaction outputs will be \xe2\x80\xa6CnThe a shortened transaction ID is the prefix in big-endian \xe2\x80\xa6BkThe address has been exposed by the wallet.BlThe fee rule used in constructing a ProposalCkA trait that represents the ability to compute the fees \xe2\x80\xa6DiA <code>FeeRule</code> implementation that implements the ZIP 317 fee \xe2\x80\xa6ClA fee rule that always returns a fixed fee, irrespective \xe2\x80\xa6BeA hashable node within a Merkle tree.CcBlock ranges that are ignored have lowest priority.Ce/ Block ranges that are ignored have lowest priority.AnThe PCZT encoding was invalid.BoA map from one bundle authorization to another.BmOnly mempool transactions should be returned.BhThe enumeration of known Zcash networks.BhThe encoded proposal contained no steps.ClA <code>redeem_script</code> can only be set on a P2SH coin.000B`The bytes do not contain a PCZT.BaBackend-specific note identifier.CmConstructs a new unified address request that requires an \xe2\x80\xa6000C`The raw encoding of an Orchard Full Viewing Key.CdThe raw encoding of an Orchard Incoming Viewing Key.CmAn Orchard raw address, FVK, or IVK encoding as specified \xe2\x80\xa6AdThe Orchard protocolAfThe Orchard value poolCnThe Orchard era begins at Orchard activation, and will end \xe2\x80\xa602BaA single payment being requested.0CmA struct that provides both the quotient and remainder of \xe2\x80\xa6DfPrivate integration / regression testing, used in <code>zcashd</code>.0CgA receiver of the associated type is required to be \xe2\x80\xa60ClData contained within the Sapling component of a Unified \xe2\x80\xa60ClA Sapling raw address, FVK, or IVK encoding as specified \xe2\x80\xa6AdThe Sapling protocolAjA Sapling payment address.AfThe Sapling value pool12AlThe Sapling network upgrade.DeThe consensus rules deployed by <code>NetworkUpgrade::Sapling</code>.CkBlock ranges that have already been scanned will not be \xe2\x80\xa6Cm/ Block ranges that have already been scanned will not be \xe2\x80\xa6CdTrait used by tests that require a full viewing key.ClExport test vectors for reuse by implementers of address \xe2\x80\xa6CnAuthorizing data for a transparent bundle in a transaction \xe2\x80\xa60BeErrors specific to unified addresses.AjA ZIP 316 Unified Address.0BdAn unknown or experimental typecode.CgThe address is not known to have been exposed to an \xe2\x80\xa6ClThe size of the script required to spend this input (and \xe2\x80\xa6CmOnly transactions that have currently-unspent transparent \xe2\x80\xa6BiAn updater for a transparent PCZT bundle.0CjThe type of identifiers used to look up transparent UTXOs.BeLeaf migrations in the 0.4.0 release.BeLeaf migrations in the 0.6.0 release.BeLeaf migrations in the 0.8.0 release.BeLeaf migrations in the 0.9.0 release.BdA version of the chain history tree.BdThe account that decrypted the note.BfReturns the underlying wallet account.BcThe Orchard actions in this bundle.AnAdds a signing key to the set.0AkReturns the address itself.CeThe address to request transactions and/or UTXOs for.it-addressChAttempts to derive the Unified Address for the given \xe2\x80\xa60ClAttempt to produce a payment address given the specified \xe2\x80\xa6CmAttempts to produce a valid payment address for the given \xe2\x80\xa6DfReturns the value of <code>address</code>, or the default value if \xe2\x80\xa60Cgeither the zcash address if external or transparent \xe2\x80\xa6Bafor the SpendsFromAddress variant5543BmStructs for handling supported address types.CeSupport for legacy transparent addresses and scripts.CiConstructs a <code>NoteFilter::Attempt</code> query node.CmReturns the change outputs to be added to the transaction \xe2\x80\xa6CiThe total value, fee value, and change outputs of the \xe2\x80\xa6BbStructs for building transactions.ClTypes and functions for building transparent transaction \xe2\x80\xa6DiCreates a <code>LocalTxProver</code> using Sapling parameters bundled \xe2\x80\xa6ClImplementations of the Zcash circuits and Zcash-specific \xe2\x80\xa6AcCombines the PCZTs.CiConstructs a <code>NoteFilter::Combine</code> query node.AoCombines two nodes\xe2\x80\x99 metadata.0AkCombine two nodes metadata.BhConverts this address into another type.CfReturns the timestamp of the transaction\xe2\x80\x99s creation.BaThe Creator role (single entity).CjReturns a <code>TransparentAddressMetadata</code> with \xe2\x80\xa6DjExtracts a fully authorized regular <code>Bundle</code> from this PCZT \xe2\x80\xa60CePerforms final checks at the conclusion of each test.ChReports the calculated fee given the specified fee rule.CjReturns true when the txid consists of all zeros; this \xe2\x80\xa60DdReturns whether or not this <code>Zatoshis</code> is the zero value.BeConstants for the Zcash main network.ChA human-readable message to be displayed to the user \xe2\x80\xa60AkExposes the network in use.Ah\xe2\x80\x9cmain\xe2\x80\x9d or \xe2\x80\x9ctest\xe2\x80\x9dBhAn identifier for the input being spent.0AmThe Orchard fields of a PCZT.CmReturns the Orchard receiver within this Unified Address, \xe2\x80\xa6CjReturns the Orchard note commitment tree and nullifier \xe2\x80\xa6BkReturns the set of spendable Orchard notes.CiReturns metadata about Orchard notes belonging to the \xe2\x80\xa6CnThe ordered vector of note commitments for Orchard outputs \xe2\x80\xa6BeReturns the Orchard note commitments.CnTypes related to computation of fees and change related to \xe2\x80\xa6ClConstructs a new change value that will be created as an \xe2\x80\xa6ChThe identifiers for Orchard inputs that could not be \xe2\x80\xa6CiReturns the Orchard keys to be used for incoming note \xe2\x80\xa6ClReturns the Orchard nullifiers for notes that the wallet \xe2\x80\xa6CnReturns the Orchard spending key component of this unified \xe2\x80\xa6DdReturns the <code>ReceiverRequirement</code> for inclusion of an \xe2\x80\xa6CjReturns the Orchard full viewing key component of this \xe2\x80\xa6BdReturns the Orchard IVK, if present.>3210ChFunctions for parsing &amp; serialization of Orchard \xe2\x80\xa6BgReturns the outputs of the transaction.BbReturns the outputs of the bundle.0ClReturns the transparent outputs that will be produced by \xe2\x80\xa6BgThe transparent outputs in this bundle.10CbPrepare the key for use in batch trial decryption.CjAccessor for the previous transparent output that this \xe2\x80\xa60CjReturns whether the account is a spending account or a \xe2\x80\xa6DiReturns the enum value of <code>purpose</code>, or the default if the \xe2\x80\xa6Aespending or view-onlyAaRegtest constantsCdExposes the test framework\xe2\x80\x99s source of randomness.AmThe Sapling fields of a PCZT.CmReturns the Sapling receiver within this Unified Address, \xe2\x80\xa6CjReturns the Sapling note commitment tree and nullifier \xe2\x80\xa6BkReturns the set of spendable Sapling notes.CiReturns metadata about Sapling notes belonging to the \xe2\x80\xa6CnThe ordered vector of note commitments for Sapling outputs \xe2\x80\xa6BeReturns the Sapling note commitments.CnTypes related to computation of fees and change related to \xe2\x80\xa6CkConstructs a new change value that will be created as a \xe2\x80\xa6ChThe identifiers for Sapling inputs that could not be \xe2\x80\xa6CiReturns the Sapling keys to be used for incoming note \xe2\x80\xa6ClReturns the Sapling nullifiers for notes that the wallet \xe2\x80\xa6CjReturns the Sapling extended spending key component of \xe2\x80\xa6DkReturns the <code>ReceiverRequirement</code> for inclusion of a Sapling \xe2\x80\xa6CfReturns the Sapling diversifiable full viewing key \xe2\x80\xa6BdReturns the Sapling IVK, if present.>3210C`Utilities for testing wallets based upon the \xe2\x80\xa6BeConstants for the Zcash test network.CgReturns the number of confirmations required before \xe2\x80\xa6CkImplementation of ZIP 316 Unified Addresses and Viewing \xe2\x80\xa6CgReturns the set of unknown receivers of the unified \xe2\x80\xa60BiThe Updater role (anyone can contribute).Bnthe version of the wallet serialization formatB`Returns the transaction version.CmA globally-unique identifier for a set of consensus rules \xe2\x80\xa6CkBlocks that must be scanned to complete the latest note \xe2\x80\xa6Cm/ Blocks that must be scanned to complete the latest note \xe2\x80\xa6ClDuration is currently used only for testing, so that the \xe2\x80\xa6CjThe scope used to derive keys for external transparent \xe2\x80\xa6CjTrait providing common encoding and decoding logic for \xe2\x80\xa6CnMetadata describing whether and when a transparent address \xe2\x80\xa6BmErrors that can occur during fee calculation.C`Errors that can occur in ZIP 317 fee computationCkBlock ranges to be scanned to advance the fully-scanned \xe2\x80\xa6Cm/ Block ranges to be scanned to advance the fully-scanned \xe2\x80\xa6CeThe scope used to derive keys for internal wallet \xe2\x80\xa6BgAn account imported from a viewing key.CmThe output was received on one of the wallet\xe2\x80\x99s external \xe2\x80\xa6CkThe output will be sent to the internal receiver of the \xe2\x80\xa6BdThe node data for this tree version.AaV1 node metadata.BbThe string is not a Zcash address.DhNamespace for functions that perform encoding of <code>Option</code> \xe2\x80\xa6ChThe output was decrypted using one of the wallet\xe2\x80\x99s \xe2\x80\xa6CmThe total of transaction inputs overflows the valid range \xe2\x80\xa6ChMetadata about the structure of unspent outputs in a \xe2\x80\xa6BcA value pool in the Zcash protocol.ChA type representing the progress the wallet has made \xe2\x80\xa6CgReports on the progress made by the builder towards \xe2\x80\xa6BmAn error in transaction proposal construction00000CdInput selection attempted to generate an invalid \xe2\x80\xa61ClA data structure that describes a series of transactions \xe2\x80\xa6CfA proposal for a series of transactions to be created.BnAn error occurred decoding a protobuf message.CaThe set of known Receivers for Unified Addresses.C`An enumeration of protocol-level receiver types.0ChThe seed is relevant to at least one derived account \xe2\x80\xa6CmConstructs a new unified address request that allows only \xe2\x80\xa6000AfA shielded value pool.0ClFor spending accounts, the wallet will track information \xe2\x80\xa6CjType-safe wrapper around String to enforce memo length \xe2\x80\xa6BjThe bytes are too short to contain a PCZT.ClA TxFilter contains the information needed to identify a \xe2\x80\xa6BiThe known Receiver and Viewing Key types.BfLeaf migrations in the 0.10.0 release.BfLeaf migrations in the 0.10.3 release.BfLeaf migrations in the 0.11.0 release.BfLeaf migrations in the 0.11.1 release.BfLeaf migrations in the 0.11.2 release.BfLeaf migrations in the 0.12.0 release.BfLeaf migrations in the 0.13.0 release.BfLeaf migrations in the 0.14.0 release.BfLeaf migrations in the 0.15.0 release.BfLeaf migrations in the 0.16.0 release.BfLeaf migrations in the 0.16.2 release.BfLeaf migrations in the 0.16.4 release.BfLeaf migrations in the 0.17.0 release.BfLeaf migrations in the 0.17.2 release.BfLeaf migrations in the 0.17.3 release.BfLeaf migrations in the 0.18.0 release.0CkFor view-only accounts, the wallet will not track spend \xe2\x80\xa6CeA wrapper for the SQLite connection to the wallet \xe2\x80\xa6DfThe shielded subset of a <code>Transaction</code>\xe2\x80\x99s data that is \xe2\x80\xa6ClA type-safe representation of some nonnegative amount of \xe2\x80\xa6Akthe accounts in this walletBfmap from account index to account dataCiReturns the raw byte array containing the memo bytes, \xe2\x80\xa6CiReturns a slice of the raw bytes, excluding null padding.CiReturns the birthday that was configured for the account.Cbthe block height at which this account was createdBgThe Combiner role (anyone can execute).CjReturns if is this node complete (has total of 2^N leaves)BgUtilities for Zcash wallet constructionCmEncoding and decoding functions for Zcash key and address \xe2\x80\xa6iEnd time.CeEquihash is a Proof-of-Work algorithm, based on a \xe2\x80\xa6CkReturns the exposure metadata for this transparent address.CkThis crate provides a mechanism for \xe2\x80\x9cjumbling\xe2\x80\x9d byte \xe2\x80\xa6CmEncodes the given message using F4Jumble, and returns the \xe2\x80\xa6CcReturns the fee paid by this transaction, if known.CkReturns the total fees paid by the transaction, given a \xe2\x80\xa6CgReturns the fee rule that this change strategy will \xe2\x80\xa6CkReturns the fee rule to be used by the transaction builder.DjReturns the enum value of <code>fee_rule</code>, or the default if the \xe2\x80\xa6BoThe fee rule used in constructing this proposalDjConstruct a <code>WalletDb</code> instance that connects to the wallet \xe2\x80\xa6CkOpens a connection to the wallet database stored at the \xe2\x80\xa6CjCreates a filesystem-backed block store at the given path.GaConverts an <code>i32</code> to a <code>ValuePool</code>, or <code>None</code> if <code>value</code> is not a \xe2\x80\xa6FoConverts an <code>i32</code> to a <code>FeeRule</code>, or <code>None</code> if <code>value</code> is not a \xe2\x80\xa6GbConverts an <code>i32</code> to a <code>ShieldedProtocol</code>, or <code>None</code> if <code>value</code> is \xe2\x80\xa6G`Converts an <code>i32</code> to a <code>PoolType</code>, or <code>None</code> if <code>value</code> is not a \xe2\x80\xa61G`Converts an <code>i32</code> to a <code>TransactionStatus</code>, or <code>None</code> if <code>value</code> \xe2\x80\xa6GaConverts an <code>i32</code> to a <code>RSeedType</code>, or <code>None</code> if <code>value</code> is not a \xe2\x80\xa6FmConverts an <code>i32</code> to a <code>Scope</code>, or <code>None</code> if <code>value</code> is not a \xe2\x80\xa6FoConverts an <code>i32</code> to a <code>RecipientType</code>, or <code>None</code> if <code>value</code> is \xe2\x80\xa6GaConverts an <code>i32</code> to a <code>AccountKind</code>, or <code>None</code> if <code>value</code> is not \xe2\x80\xa6G`Converts an <code>i32</code> to a <code>AccountPurpose</code>, or <code>None</code> if <code>value</code> is \xe2\x80\xa6FcConverts an <code>i32</code> to a <code>TransactionDataRequestType</code>, or <code>None</code> \xe2\x80\xa6GbConverts an <code>i32</code> to a <code>ScanPriority</code>, or <code>None</code> if <code>value</code> is not \xe2\x80\xa6BbCreates an ZatBalance from an i64.CfAttempts to parse the given string as a Zcash address.DkReturns a <code>Memo</code> containing the given string, or an error if \xe2\x80\xa6BaCreates an ZatBalance from a u64.AnCreates a Zatoshis from a u64.CbParse the provided URI to a payment request value.0AlReturns the memo for a note.AoReturns this Zatoshis as a u64.DkConsumes this <code>ReceivedNotes</code> value and produces a vector of \xe2\x80\xa6CmReturns whether or not this proposal requires interaction \xe2\x80\xa6BoReturns whether or not the scan range is empty.AfIf this tree is empty.EgReturns <code>true</code> if <code>value</code> is a variant of <code>ValuePool</code>.EeReturns <code>true</code> if <code>value</code> is a variant of <code>FeeRule</code>.EnReturns <code>true</code> if <code>value</code> is a variant of <code>ShieldedProtocol</code>.EfReturns <code>true</code> if <code>value</code> is a variant of <code>PoolType</code>.1EoReturns <code>true</code> if <code>value</code> is a variant of <code>TransactionStatus</code>.EgReturns <code>true</code> if <code>value</code> is a variant of <code>RSeedType</code>.EcReturns <code>true</code> if <code>value</code> is a variant of <code>Scope</code>.EkReturns <code>true</code> if <code>value</code> is a variant of <code>RecipientType</code>.EiReturns <code>true</code> if <code>value</code> is a variant of <code>AccountKind</code>.ElReturns <code>true</code> if <code>value</code> is a variant of <code>AccountPurpose</code>.DcReturns <code>true</code> if <code>value</code> is a variant of \xe2\x80\xa6EjReturns <code>true</code> if <code>value</code> is a variant of <code>ScanPriority</code>.ClMap over the <code>note</code> field of this data structure.AcCreates a new leaf.ClReturns the <code>OutPoint</code> corresponding to the UTXO.CnReturns the <code>OutPoint</code> corresponding to the output.Bhthe outpoint metadata if InternalAccountBgThe outpoint to which the input refers.CfReturns the map of payments that make up this request.0ClReturns the priority with which the scan range should be \xe2\x80\xa6DjReturns the enum value of <code>priority</code>, or the default if the \xe2\x80\xa6CkReturns the progress of scanning the chain to bring the \xe2\x80\xa6CgTypes related to the construction and evaluation of \xe2\x80\xa6C`Returns the shielded protocol used by this note.0DjReturns the enum value of <code>protocol</code>, or the default if the \xe2\x80\xa60BjReturns the quotient portion of the value.ChReturns the progress the wallet has made in scanning \xe2\x80\xa6BgThe Redactor role (anyone can execute).ChThe total amount of input value required to fund the \xe2\x80\xa6ClTools for scanning a compact representation of the Zcash \xe2\x80\xa6CjCommon types used for managing a queue of scanning ranges.BbThe sequence number of this input.CnThe sequence number of the input (no Zcash protocol use as \xe2\x80\xa6101CbSets <code>kind</code> to the provided enum value.CbSets <code>pool</code> to the provided enum value.CkConstructs a new change value that will be created as a \xe2\x80\xa6CmSplits this scan range at the specified height, such that \xe2\x80\xa6CgChange strategies designed for use with a standard fee.CfConstruct a new FeeRule using the standard ZIP 317 \xe2\x80\xa6CfReturns a binary encoding of this key suitable for \xe2\x80\xa6CgEncodes the extended spending key to its serialized \xe2\x80\xa6BdReturns the raw encoding of this \xe2\x80\xa6B`Converts to byte representation.0AoConvert to byte representation.432DiReturns the <code>AccountPrivKey</code> serialized using the encoding \xe2\x80\xa6CiRemoves all cached blocks above a specified block height.CjParses a <code>Memo</code> from its ZIP 302 serialization.0DgReturns the value of <code>tx_index</code>, or the default value if \xe2\x80\xa6Bkmap from transaction id to transaction dataBgThe Verifier role (anyone can inspect).CjConstructs a new unified address request that allows a \xe2\x80\xa6000BdBackend-specific account identifier.BcThe type of the account identifier.BhA memo field containing arbitrary bytes.BaThe identifier for a Zcash block.CkData structure representing a row in the block metadata \xe2\x80\xa6BlA <code>u8</code> value in the range 0..=MAXCeThe mainnet coin type for ZEC, as defined by SLIP 44.C`The regtest cointype reuses the testnet cointypeCeThe testnet coin type for ZEC, as defined by SLIP 44.ClThe block at the specified height was not available from \xe2\x80\xa6CjChainspec is a placeholder to allow specification of a \xe2\x80\xa6ClA compact representation of the shielded data in a Zcash \xe2\x80\xa6ChTrait for Unified containers, that exposes the items \xe2\x80\xa6CgA trait for converter types that can project from a \xe2\x80\xa6CkThe scope used to derive keys for ephemeral transparent \xe2\x80\xa6FbMMR Node. It is leaf when <code>left</code>, <code>right</code> are <code>None</code> and node \xe2\x80\xa6AkReference to the tree node.CkBlocks that must be scanned to complete note commitment \xe2\x80\xa6Cm/ Blocks that must be scanned to complete note commitment \xe2\x80\xa6ClA block source that reads block data from disk and block \xe2\x80\xa6CmA data structure that can be used to configure custom gap \xe2\x80\xa6BeReference to the generated leaf/node.ClInformation about the chain\xe2\x80\x99s view of a transaction is \xe2\x80\xa6AnThe Heartwood network upgrade.DgThe consensus rules deployed by <code>NetworkUpgrade::Heartwood</code>.CdThe size of a transparent input, or the outpoint \xe2\x80\xa6CnA trait that provides a minimized view of an Orchard input \xe2\x80\xa6CmA trait that provides a minimized view of a Sapling input \xe2\x80\xa6CiThis trait provides a minimized view of a transparent \xe2\x80\xa6CcAn object wrapper for memo bytes, to facilitate \xe2\x80\xa6ClThe unencrypted memo bytes received alongside a shielded \xe2\x80\xa6AjA proposed input was null.CkThe type of nullifier corresponding to the kind of note \xe2\x80\xa6ClDescribes a policy for which outgoing viewing key should \xe2\x80\xa6AiThe components of a PCZT.i10000 ZATCiA type that represents the recipient of a transaction \xe2\x80\xa6BgErrors that may occur in chain scanningCnA range of blocks to be scanned, along with its associated \xe2\x80\xa6ClAn error occurred specific to the provided input selector\xe2\x80\xa6ChA shard tree defined by a cap subtree and shard subtreesBoTrait used by tests that require a block cache.CgThe state for a <code>zcash_client_backend</code> test.CeA helper trait for converting another type into a \xe2\x80\xa6AgA shard in a shard treeCkThe TreeState is derived from the Zcash z_gettreestate rpc.BoThe set of defined transaction format versions.ClAdds a P2PKH coin (the output of a previous transaction) \xe2\x80\xa60DeAdds a single spend to the given <code>CompactTx</code> of a note \xe2\x80\xa6Aaaccount addressesCiReturns the block height at which the scan error occurredCkThe address was first exposed to the wider ecosystem at \xe2\x80\xa6CdThe total of the inputs provided to change selectionAbRemoves the proof.0DoRemoves the <code>ock</code> value used to encrypt <code>out_ciphertext</code>.BgRemoves the note commitment randomness.BhRemoves the value commitment randomness.00BmThe coin type for ZEC, as defined by SLIP 44.AoConsensus logic and parameters.BaNetwork-specific Zcash constants.CdReturns the fixed fee amount which this rule was \xe2\x80\xa6CkReturns the child key corresponding to the path derived \xe2\x80\xa60CkPerforms derivation of the extended private key for the \xe2\x80\xa6DkConstructs an <code>AccountUuid</code> from a bare <code>Uuid</code> value.CnThe maximum number of sequential child indices that can be \xe2\x80\xa6CmReturn the compact block corresponding to the given block \xe2\x80\xa6ChReturns all the notes that have been received by the \xe2\x80\xa6ClReturn the intersection of two requirements that chooses \xe2\x80\xa6CjConstructs a new unified address request that includes \xe2\x80\xa610CiDestroy this reader and return the hash of what was read.CgDestroy this writer and return the hash of what was \xe2\x80\xa6ClA flag indicating whether the process of note decryption \xe2\x80\xa6CcReturns whether or not wallet scanning is complete.DiReturns the <code>zip32::Scope</code> for which this key was derived, \xe2\x80\xa6CkThe net value for the JoinSplit. When this is positive, \xe2\x80\xa6DgCreates a constant <code>BoundedU8</code> from a <code>u8</code> value.Bd[32] The nullifier of the input noteBcReturns the numerator of the ratio.DkReturns the enum value of <code>pool_type</code>, or the default if the \xe2\x80\xa6Bathe shielded protocol if ExternalCmReturns the <code>BlockHash</code> for this block\xe2\x80\x99s parent.Bkthe ID (hash) of this block\xe2\x80\x99s predecessorBfConsensus rules (\xc2\xa77.3) &amp; (\xc2\xa77.4):CmThe raw encoding of the Orchard payment address that will \xe2\x80\xa6CmThe raw encoding of the Sapling payment address that will \xe2\x80\xa6ClReturns the recipient address of the transaction, or the \xe2\x80\xa6BkReturns the remainder portion of the value.BiReturns the root of the complete subtree.BgThe 32-byte Merkle root of the subtree.AkReference to the root node.AeSerializes this PCZT.CeSerialization formats for data stored as SQLite BLOBsBeExposes the seed for the test wallet.DkReturns the enum value of <code>tx_status</code>, or the default if the \xe2\x80\xa6CgReturns the number of confirmations required before \xe2\x80\xa6BnThe net value of Orchard spends minus outputs.BnThe net value of Sapling spends minus outputs.BfSets the seed for the migrator to use.Co<code>Authorization</code> marker type for fully-authorized \xe2\x80\xa6Eh<code>BlockCache</code> is a trait that extends <code>BlockSource</code> and defines \xe2\x80\xa6CmBlockRange specifies a series of blocks from start to end \xe2\x80\xa6ClA trait that provides a minimized view of Orchard bundle \xe2\x80\xa6ClA trait that provides a minimized view of Sapling bundle \xe2\x80\xa6CnIt is not possible for the wallet to determine whether the \xe2\x80\xa6CjThe final note commitment tree state for each shielded \xe2\x80\xa6CiErrors that may be generated in combined creation and \xe2\x80\xa6CnAn error occurred retrieving data from the underlying data \xe2\x80\xa600000CfAn error occurred accessing the underlying data store.1CnAn enumeration of actions to take when a transaction would \xe2\x80\xa6CmSome of the inputs provided to the transaction have value \xe2\x80\xa6El<code>Everything</code> will target to spend <strong>all funds</strong> and will fail if \xe2\x80\xa6DfA <code>Clock</code> impl that always returns a constant value for \xe2\x80\xa6ClAbstraction over a reader which SHA-256d-hashes the data \xe2\x80\xa6ClAbstraction over a writer which SHA-256d-hashes the data \xe2\x80\xa6CeLightdInfo returns various information about this \xe2\x80\xa6CiThe type of metadata source that this change strategy \xe2\x80\xa6B`The wallet contains no accounts.CiThe string is not Bech32m encoded, and so cannot be a \xe2\x80\xa6CnA small query language for filtering notes belonging to an \xe2\x80\xa6C`The set of nullifiers being tracked by a wallet.CnA trait that provides a minimized view of a Orchard output \xe2\x80\xa6CnA trait that provides a minimized view of a Sapling output \xe2\x80\xa6CiThis trait provides a minimized view of a transparent \xe2\x80\xa6AoThe Overwinter network upgrade.DhThe consensus rules deployed by <code>NetworkUpgrade::Overwinter</code>.AkZcash consensus parameters.BkErrors that can occur while parsing a PCZT.CjAn error while attempting to parse a string as a Zcash \xe2\x80\xa60CbThe ZIP 321 URI was malformed and failed to parse.CiErrors that can occur in the parsing of Bitcoin-style \xe2\x80\xa60CbErrors that can occur while parsing a PCZT bundle.02CcThe result of <code>Builder::build_for_pczt</code>.CfThe wallet encountered an error when attempting to \xe2\x80\xa6CnErrors that may be generated in the execution of shielding \xe2\x80\xa6CnNo derivation information is available; this is common for \xe2\x80\xa6CkThe address was derived from a secp256k1 public key for \xe2\x80\xa6CbA reference to the output of a step in a proposal.CiRead-only operations required for light wallet functions.CjRead-only operations required for testing light wallet \xe2\x80\xa6CjAn unspent transparent output belonging to the wallet, \xe2\x80\xa6CiA type-safe representation of a Zcash value delta, in \xe2\x80\xa6ChReturns the id for the account that created the outputs.ClReturns the wallet-internal ID for the account that this \xe2\x80\xa6CkReturns the account identifier for this key. An account \xe2\x80\xa6CnReturns the identifier to the account_id to which the note \xe2\x80\xa6CkThe identifier for the account to which the output belongs.DiReturns the value of <code>account_id</code>, or the default value if \xe2\x80\xa6Cithe account id if EphemeralTransparent or InternalAccountAithe index of this accountDiAdds a single output to the given <code>CompactTx</code> that will be \xe2\x80\xa6CeReturns the block hash of the block that was scanned.AmReturns the hash of the blockAmReturn the hash of the block.CnReturns the block time of the block that was scanned, as a \xe2\x80\xa6BhUnix epoch time when the block was minedCiReturns the network type for the chain this server is \xe2\x80\xa6Aoeither \xe2\x80\x9cmain\xe2\x80\x9d or \xe2\x80\x9ctest\xe2\x80\x9dAlfirst 52 bytes of ciphertextCb[52] The first 52 bytes of the encCiphertext fieldCdStructs representing the components within Zcash \xe2\x80\xa6BiReturns the value of the compressed flag.0CnCreate a mew memory wallet db from a protobuf encoded byte \xe2\x80\xa6ClGenerates the \xe2\x80\x9copenssh-inspired\xe2\x80\x9d DER encoding of the \xe2\x80\xa60BoReturns the end height for the given node data.jEnd heightkEnd target.BhReturns the fee paid by the transaction.DkReturns the <code>CompactBlock</code> at the given height, if it exists \xe2\x80\xa6CmReturns the metadata for the block with the given height, \xe2\x80\xa6CmReturns the branch ID corresponding to the consensus rule \xe2\x80\xa6DgDecodes a <code>UnifiedSpendingKey</code> value from its serialized \xe2\x80\xa6CiDecodes the extended spending key from its serialized \xe2\x80\xa6DgParses a <code>DiversifiableFullViewingKey</code> from its raw byte \xe2\x80\xa6BaConvert from byte representation.000321BjWraps the given byte array as a TxId valueDkCreates a <code>LocalTxProver</code> using parameters specified as byte \xe2\x80\xa61DcCreates a <code>MemoBytes</code> from a slice, exactly as provided.CjParses a <code>Memo</code> from its ZIP 302 serialization.DkDecodes the <code>AccountPrivKey</code> from the encoding specified for \xe2\x80\xa6BdParses the given ZIP 32 child index.DbConstructs an <code>AddressInfo</code> from its constituent parts.D`Constructs a new <code>SentTransactionOutput</code> from its \xe2\x80\xa6CbConstructs an output from its test-relevant parts.DjConstructs a new <code>BlockMetadata</code> value from its constituent \xe2\x80\xa6DfConstructs a new <code>AccountBirthday</code> from its constituent \xe2\x80\xa6CcConstructs a scan range from its constituent parts.DhConstruct a new <code>CommitmentTreeRoot</code> from its constituent \xe2\x80\xa6ClConstructs a <code>TransactionSummary</code> from its parts.DdConstructs a <code>ShieldedInputs</code> from its constituent parts.DdConstructs a validated <code>Step</code> from its constituent parts.DbConstructs a new <code>WalletTransparentOutput</code> from its \xe2\x80\xa6DaConstructs a <code>WalletSpend</code> from its constituent parts.DiConstructs a new <code>WalletOutput</code> value from its constituent \xe2\x80\xa6DfConstructs a new <code>ReceivedNote</code> from its constituent parts.DfConstructs a new <code>GapLimits</code> value from its constituent \xe2\x80\xa6DeConstructs a <code>TransactionData</code> from its constituent parts.CnConstructs a new <code>TxIn</code> from its constituent parts.0BkConstructs a signable input from its parts.CiConstructs a <code>BlockHash</code> from the given slice.DkReturns <code>true</code> if the account received a change note as part \xe2\x80\xa6DfReturns <code>true</code> if this transaction version supports the \xe2\x80\xa6CiReturns a mutable reference to the inputs in this bundle.0DiConsumes this <code>MemoBytes</code> value and returns the underlying \xe2\x80\xa6CdReturns the application-level key source identifier.DiReturns the value of <code>key_source</code>, or the default value if \xe2\x80\xa6Ackey source metadataBaNumber of leaves under this node.CiReturns the number of non-empty memos viewable by the \xe2\x80\xa6DdMigrations for the <code>zcash_client_sqlite</code> wallet database.CmBuild the transaction using mocked randomness and proving \xe2\x80\xa6ChConstructs a validated multi-step <code>Proposal</code>.CiReturns the number of unspent outputs in the account, \xe2\x80\xa6CmReturns the number of unspent notes in the wallet for the \xe2\x80\xa6Bmthe nullifiers for notes spent by this walletCnUpdates the state of the wallet database by persisting the \xe2\x80\xa6BlAdds a sequence of blocks to the data store.DoReads a <code>PrunableTree</code> from the provided <code>Read</code> instance.DhIf a <code>request_at</code> time is set, the caller evaluating this \xe2\x80\xa6DhReturns the enum value of <code>rseed_type</code>, or the default if \xe2\x80\xa6AoNumber of Sapling transactions.DjScans a <code>CompactBlock</code> with a set of <code>ScanningKeys</code>.Clthe scan queue (which blocks the wallet should scan next \xe2\x80\xa6BlThe signature being used to spend the input.DhA satisfying witness for the <code>script_pubkey</code> of the input \xe2\x80\xa610DiReturns the value of <code>seen_in_tx</code>, or the default value if \xe2\x80\xa6Amthe notes sent by this walletCjReturns a <code>TransparentAddressMetadata</code> with \xe2\x80\xa6kStart time.CfReturns the step index to which this reference refers.Bomap between txIds and their inclusion in blocksCdConstruct a new unified address request from its \xe2\x80\xa60CnReturns the total value of unspent transparent transaction \xe2\x80\xa6DiReturns the value of <code>used_in_tx</code>, or the default value if \xe2\x80\xa6DhReturns the enum value of <code>value_pool</code>, or the default if \xe2\x80\xa600CjThe value pool in which the change or ephemeral output \xe2\x80\xa6DcExposes a mutable reference to the test\xe2\x80\x99s <code>DataStore</code>.Cf<em>A crate for Zcash key and address management.</em>CdMetadata about the structure of the wallet for a \xe2\x80\xa6CiUnique identifier for a specific account tracked by a \xe2\x80\xa6BkInformation about an address in the wallet.DcConfigures how a <code>TestFvk</code> receives a particular output.AeA Zcash block header.BoA wrapper type representing blockchain heights.CkAn error that was produced by the underlying block data \xe2\x80\xa6CkThis trait provides sequential access to raw blockchain \xe2\x80\xa6CkRules for how the builder should be configured for each \xe2\x80\xa6CfThe result of a transaction build operation, which \xe2\x80\xa6CkThe proposed bundle structure would violate bundle type \xe2\x80\xa6CkMetadata about a block generated by <code>TestState</code>.CnErrors that can occur in computing suggested change and/or \xe2\x80\xa6CmA proposed change or ephemeral output. If the transparent \xe2\x80\xa6Dj<code>ChangeValue</code> represents either a proposed change output to \xe2\x80\xa6CiNamespace for functions for compact encoding of integers.CiMarker type for a bundle that contains no authorizing \xe2\x80\xa60CeTransaction enhancement (download of complete raw \xe2\x80\xa6ClAn incoming viewing key at the BIP44 \xe2\x80\x9cexternal\xe2\x80\x9d path \xe2\x80\xa6DaExternal outgoing viewing key used by <code>zcashd</code> for \xe2\x80\xa6CcMetadata describing the gap limit position of a \xe2\x80\xa6CnThe type of data source that the input selector expects to \xe2\x80\xa60CmA trait representing the capability to query a data store \xe2\x80\xa6ClAn incoming viewing key at the BIP44 \xe2\x80\x9cinternal\xe2\x80\x9d path \xe2\x80\xa6CeInternal outgoing viewing key used for autoshielding.ChA received memo cannot be interpreted as a UTF-8 string.CiThe rcm value for a note cannot be decoded to a valid \xe2\x80\xa6CkThe minimum conventional fee computed from the standard \xe2\x80\xa6nZcash Mainnet.BiMarker struct for the production network.CfFailed to decode a ZIP-302-compliant memo from the \xe2\x80\xa6BmThe enumeration of known Zcash network types.CkThe seed is not relevant to any of the derived accounts \xe2\x80\xa6B`The sprout parameters file name.ClMetadata about modifications to the wallet state made in \xe2\x80\xa6CnAn incoming viewing key, paired with an optional nullifier \xe2\x80\xa6AgA ZIP 244 sighash type.CnErrors that can occur while signing a transparent input in \xe2\x80\xa60CmA policy that describes how change output should be split \xe2\x80\xa6DhA <code>Clock</code> impl that returns the current time according to \xe2\x80\xa6ChAn intent of representing spendable value to reach a \xe2\x80\xa6CiThe test account configured for a <code>TestState</code>.DkA <code>TestState</code> builder, that configures the environment for a \xe2\x80\xa6nZcash Testnet.BcMarker struct for the test network.AdA Zcash transaction.AjThe transparent value poolCnA transparent address corresponding to either a public key \xe2\x80\xa6CnThe transparent value pool (P2SH is not distinguished from \xe2\x80\xa612CmA transaction identifier string did not decode to a valid \xe2\x80\xa6CeThe address type is not supported by the target type.CdErrors that can occur while verifying a PCZT bundle.0CnA reference to a spent note belonging to the wallet within \xe2\x80\xa6CiAn error while interacting with a wallet database via \xe2\x80\xa6CnThis trait encapsulates the write capabilities required to \xe2\x80\xa6CfErrors that may be produced in decoding of payment \xe2\x80\xa60AlAppend one leaf to the tree.DhCreate an arbitrary, structurally-valid <code>ZcashAddress</code> value.CmString value of the enum field names used in the ProtoBuf \xe2\x80\xa6000000000000CjReturns the index of the transaction in the containing \xe2\x80\xa6CaReturns the range of block heights to be scanned.AnReturns the type of the bundle0CjInformation about the chain\xe2\x80\x99s state as of the chain tip.BkRemoves the spend authorization randomizer.CeRemoves the seed randomness for the note being spent.CgRemoves the seed randomness for the note being created.AbRemoves the value.0ClReturns the ordered list of note commitments to be added \xe2\x80\xa6DjReturns whether or not this receiver corresponds to <code>addr</code>, \xe2\x80\xa60BeReturns the denominator of the ratio.CnReturns the encoded length of the message without a length \xe2\x80\xa6CkExposes the opaque account identifier from its typesafe \xe2\x80\xa6CnDerives the P2PKH transparent address corresponding to the \xe2\x80\xa6CjReturns the account corresponding to the given ID, if any.CeReturns whether this address has an Orchard receiver.CbReturns whether this uivk has an Orchard key item.10DfReturns <code>true</code> if this transaction version supports the \xe2\x80\xa6CdReturns whether this address has a Sapling receiver.CaReturns whether this uivk has a Sapling key item.102DhReturns <code>true</code> if this bundle matches the definition of a \xe2\x80\xa60ElReturns <code>true</code> if <code>self</code> is negative and <code>false</code> if the \xe2\x80\xa6ElReturns <code>true</code> if <code>self</code> is positive and <code>false</code> if the \xe2\x80\xa6CnReturns whether or not this <code>Zatoshis</code> is positive.BjMaps the bundles from one type to another.CjMaximum number of entries to return, or 0 for all entries.Adzero means unlimitedBoParsers and serializers for Zcash Merkle trees.CmReturns the Orchard outgoing viewing key corresponding to \xe2\x80\xa6ClReturns the pool to which the change or ephemeral output \xe2\x80\xa6CfProprietary fields related to the overall transaction.CcProprietary fields related to the note being spent.00CeProprietary fields related to the note being created.11ClProprietary fields related to the transparent coin being \xe2\x80\xa6000CmReturns the Sapling outgoing viewing key corresponding to \xe2\x80\xa6CeSets <code>purpose</code> to the provided enum value.DjConstructs a validated <code>Proposal</code> having only a single step \xe2\x80\xa6CjReturns the number of output notes to produce from the \xe2\x80\xa6ChIndex identifying where to start returning subtree rootsClReturns the total value of notes spent by the account in \xe2\x80\xa6BlComputes the total value of spendable inputsClReturns the total value of shielded notes represented by \xe2\x80\xa6CdStructs and methods for handling Zcash transactions.CgReturns the transaction that was constructed by the \xe2\x80\xa6BaThe transparent fields of a PCZT.ChReturns the transparent receiver within this Unified \xe2\x80\xa6CjThe outpoints for transparent inputs that could not be \xe2\x80\xa6CkTypes and encodings for standalone transparent spending \xe2\x80\xa6CkReturns the transparent component of the unified key at the0CaReturns the Transparent external IVK, if present.41102CnTypes related to computation of fees and change related to \xe2\x80\xa6CmUpdates the bundle with information provided in the given \xe2\x80\xa60CkReturns the list of UTXOs spent in the created transaction.B`the viewing key for this accountDcScan the specified <code>limit</code> number of blocks from the \xe2\x80\xa6DoWrites a <code>PrunableTree</code> to the provided <code>Write</code> instance.DcWrites an iterator of values by writing <code>CompactSize</code>\xe2\x80\xa6CiTye type of wallet metadata that this change strategy \xe2\x80\xa6CfAllow dust amounts to be added to the transaction fee.CbA trait for encoding and decoding Zcash addresses.0CkThe wallet attempted to create a transaction that would \xe2\x80\xa6CgZcash amount computation encountered an overflow or \xe2\x80\xa6000000CkThe input total and output total of the payment request \xe2\x80\xa6BmAn error occurred in computing wallet balanceBeWrapper for amount balance violationsChA type for balance violations in amount addition and \xe2\x80\xa6CcReverting the specified migration is not supported.ClA compact representation of the shielded data in a Zcash \xe2\x80\xa6CgAn incoming viewing key at the \xe2\x80\x9cephemeral\xe2\x80\x9d path \xe2\x80\xa6CjEntry expected to be a node (specifying for which link \xe2\x80\xa6BhAn updater for a transparent PCZT input.0CjAn out-of-bounds index was provided when looking up an \xe2\x80\xa60BkAn invalid <code>value</code> was provided.0Dja <code>LocalNetwork</code> setup should define the activation heights \xe2\x80\xa6AgThe production network.BbThe standard ZIP 317 marginal fee.DcThe migration that added the <code>compactblocks_meta</code> table.CjSpecifies how an TargetValue::AllFunds should be evaluatedEc<code>MaxSpendable</code> will target to spend all <em>currently</em> spendable \xe2\x80\xa6AoA serialized zcash wallet stateCnA mock wallet data source that implements the bare minimum \xe2\x80\xa6ClProtobuf requires that enums have a zero discriminant as \xe2\x80\xa6ChA note being spent does not correspond to either the \xe2\x80\xa6000000CmBlock ranges adjacent to heights at which the user opened \xe2\x80\xa6Ch/ Block ranges adjacent to heights at which the user \xe2\x80\xa6ClAn error occurred in constructing the Orchard parts of a \xe2\x80\xa6ClErrors that can occur while verifying the Orchard bundle \xe2\x80\xa6CnErrors that can occur while updating the Orchard bundle of \xe2\x80\xa6CeAn error occurred in adding an Orchard Spend to a \xe2\x80\xa6CjPingResponse is used to indicate concurrency, how many \xe2\x80\xa6CmA data structure that describes the inputs to be consumed \xe2\x80\xa6CfA note that was received by the wallet, along with \xe2\x80\xa6ClAn error occurred in constructing the Sapling parts of a \xe2\x80\xa6AoScanning range priority levels.CjThe wallet must first perform a scan of the blockchain \xe2\x80\xa6000000CmThe subset of information that is relevant to this wallet \xe2\x80\xa6ChA set of keys to be used in scanning for decryptable \xe2\x80\xa6BgThe seed is required for the migration.ClA SendResponse encodes an error code and a string. It is \xe2\x80\xa6CeA set of spending keys for an account, for use in \xe2\x80\xa6CiThe proposal tried to spend a change output. Mark the \xe2\x80\xa6CnThe data source does not have enough information to choose \xe2\x80\xa6AaThe test network.EdA wrapper type around <code>BlockHeight</code> that represents the <em>next</em> \xe2\x80\xa6CnErrors that may be generated in the execution of proposals \xe2\x80\xa6CjAn enumeration of the possible relationships a TXO can \xe2\x80\xa6CmA TransactionDigest implementation that commits to all of \xe2\x80\xa6Dc<code>Authorization</code> marker type for transactions without \xe2\x80\xa6CnErrors that can occur while signing a transparent input in \xe2\x80\xa60CeLength of F4Jumbled message must lie in the range \xe2\x80\xa6ClAn output that was successfully decrypted in the process \xe2\x80\xa6A`A Zcash address.Bchuman readable name for the accountAiReturns the block height.CkReturns the block height to which this chain state applies.CjReturns the chain tip height reported by the full node \xe2\x80\xa6Anlatest block on the best chainAhthe height of this blockCfExposes the block cache as a <code>BlockSource</code>.CmReturns the height of the chain as known to the wallet as \xe2\x80\xa6CeConverts this address into another type using the \xe2\x80\xa6BbSprout JoinSplit proof generation.CdDerives the child key at the given (hardened) index.0CnDerives the external ovk corresponding to this transparent \xe2\x80\xa6CnDecodes the given message using F4Jumble\xe2\x81\xbb\xc2\xb9, and returns \xe2\x80\xa6CbEncodes the given message in-place using F4Jumble.CjReturns the fee computed for the transaction, assuming \xe2\x80\xa6CfThe fee to be paid by the proposed transaction, in \xe2\x80\xa6CkComputes the total fee required for a transaction given \xe2\x80\xa6CjSearches the diversifier space starting at diversifier \xe2\x80\xa60CnSearch the diversifier space starting at diversifier index \xe2\x80\xa6CjFinds the next valid payment address starting from the \xe2\x80\xa62210CnConstructs a new transaction request from the provided map \xe2\x80\xa60CnTransparent address gap metadata, as of the time the query \xe2\x80\xa6CeA zero-based index over the child indices in the gap.ChReturns the range of heights for the consensus epoch \xe2\x80\xa6CnDerives the internal ovk corresponding to this transparent \xe2\x80\xa6BjWhether this is to be an ephemeral output.0CnDetermines whether the specified network upgrade is active \xe2\x80\xa6DhReturns <code>true</code> if this is detectably a shielding transaction.CiReturns a flag indicating whether or not the proposed \xe2\x80\xa6CiA flag indicating whether the step is for a shielding \xe2\x80\xa6BaReturns the ZIP 317 marginal fee.0CmReturns the height at which the transaction was mined, if \xe2\x80\xa6CgReturns the height at which the UTXO was mined, if any.CiReturns the height of the mined block containing this \xe2\x80\xa61CjReturns the block height at which the transaction that \xe2\x80\xa6DkReturns the value of <code>mined_height</code>, or the default value if \xe2\x80\xa6CiReturns the type of network configured by this set of \xe2\x80\xa6CgConstruct a new FeeRule instance with the specified \xe2\x80\xa6CeCreates a new nonstandard fixed fee rule with the \xe2\x80\xa6CnReturns the mapping from Orchard inputs and outputs to the \xe2\x80\xa6CmDeserializes and returns the Sapling note commitment tree \xe2\x80\xa6Amorchard commitment tree stateB`Orchard shielded pool shard treeCmA list of other arbitrary key/value pairs associated with \xe2\x80\xa60CnReturns the index within the transaction that contains the \xe2\x80\xa6CkReturns the identifier for the payment or change output \xe2\x80\xa6CmReturns the index of this note within its transaction\xe2\x80\x99s \xe2\x80\xa6CcReturns the output index of the note within the \xe2\x80\xa6CeThe ID of the previous transaction containing the \xe2\x80\xa60BfConsensus rules (\xc2\xa74.4) &amp; (\xc2\xa74.5):BeRedacts the input at the given index.BeRedacts the spend at the given index.DjReturns the enum value of <code>request_type</code>, or the default if \xe2\x80\xa6BfResolve link originated from this treeCjReturns the mapping from Sapling inputs and outputs to \xe2\x80\xa6>Amsapling commitment tree stateB`Sapling shielded pool shard treeCfSets <code>fee_rule</code> to the provided enum value.CfSets <code>priority</code> to the provided enum value.CfSets <code>protocol</code> to the provided enum value.0BkThe sighash type to be used for this input.0DhDerives the ZIP 32 <code>ExtendedSpendingKey</code> for a given coin \xe2\x80\xa60CaReturns the start height for the given node data.mStart height.mStart target.CeConsumes this value and returns the Orchard notes \xe2\x80\xa6CeConsumes this value and returns the Sapling notes \xe2\x80\xa6CgReturns a reference to the test account, if one was \xe2\x80\xa6CmReturns the list of transactions from this block that are \xe2\x80\xa6Bgthe txids of transactions in this blockCdShifts the end of the block range to the left if \xe2\x80\xa6CiThe user-facing address to which this output is being \xe2\x80\xa60000BdSprout JoinSplit proof verification.CiParses the Orchard bundle and then verifies it in the \xe2\x80\xa6DfConstructs a new <code>Payment</code> paying the given address the \xe2\x80\xa60Bc<em>Zcash circuits and proofs.</em>Aoexample: \xe2\x80\x9cv4.1.1-877212414\xe2\x80\x9dC`A BIP44 public key at the account path level \xe2\x80\xa6DeThe kinds of accounts supported by <code>zcash_client_backend</code>.BmSource metadata for an address in the wallet.CeAuthorization state for a bundle of transaction data.CgThe bech32m checksum algorithm, defined in BIP-350, \xe2\x80\xa6CcErrors that can occur in the construction of an \xe2\x80\xa6CgAn attempt to update block data would overwrite the \xe2\x80\xa6CnMetadata describing the sizes of the zcash note commitment \xe2\x80\xa6CjInformation about the state of the chain as of a given \xe2\x80\xa6CkDecoding of a stored value from its serialized form has \xe2\x80\xa6CnDecoding of an existing value from its serialized form has \xe2\x80\xa6ClA type for errors that can occur when decoding keys from \xe2\x80\xa6BeA Zcash key or address decoding error1CkThe minimum number of logical actions that must be paid \xe2\x80\xa6BiAn updater for a transparent PCZT output.CnThe unspent note or UTXO corresponding to a proposal input \xe2\x80\xa6BbA Redactor for transparent inputs.CmA strategy for selecting transaction inputs and proposing \xe2\x80\xa6ClA memo field in the ZIP 321 URI was not properly base-64 \xe2\x80\xa60CkValue error indicating that length of F4Jumbled message \xe2\x80\xa6EeAn implementation of <code>SpendProver</code> and <code>OutputProver</code> using \xe2\x80\xa6CgA block cache that just holds blocks in a map in memoryCiIt is forbidden to provide a memo when constructing a \xe2\x80\xa6000000CkA predicate that can be used to choose whether or not a \xe2\x80\xa6AjAn error in note selection000000::CmErrors that can occur in construction of a <code>Step</code>.CnThe unique identifier and value for an input to be used in \xe2\x80\xa6CbShielded outputs that were received by the wallet.BjThe relevance of a seed to a given wallet.BiErrors in deserializing stored shard dataClA transparent input that is signable because we know its \xe2\x80\xa6AnA Redactor for Sapling spends.CeAn error occurred that was specific to the change \xe2\x80\xa6CjIllegal attempt to reinitialize an already-initialized \xe2\x80\xa6CiThe Bech32m string has an unrecognized human-readable \xe2\x80\xa6CfTransaction version 3, which was introduced by the \xe2\x80\xa6CnTransaction version 4, which was introduced by the Sapling \xe2\x80\xa6CjTransaction version 5, which was introduced by the NU5 \xe2\x80\xa6CjA type representing the potentially-spendable value of \xe2\x80\xa6DgAn extension to the <code>FeeRule</code> trait that exposes methods \xe2\x80\xa6ClReturns the account-level index in the ZIP 32 derivation \xe2\x80\xa6DiReturns the value of <code>account_index</code>, or the default value \xe2\x80\xa6BdHD index to derive account from seedAnthe nonce for the next accountDfReturns the BIP 44 <code>NonHardenedChildIndex</code> at which the \xe2\x80\xa60ClReturns the anchor height for Sapling inputs that should \xe2\x80\xa6CmThe anchor height to be used in creating the transaction, \xe2\x80\xa6CkRemoves the witness from the note to the bundle\xe2\x80\x99s anchor.AbRemoves the proof.00AlCombines two nodes metadata.BdDecodes a base58-encoded secret key.0BdEncodes a base58-encoded secret key.0CaReturns the ephemeral public key for this output.CkReturns the ephemeral public key for the output of this \xe2\x80\xa6Adephemeral public keyCb[32] An encoding of an ephemeral Pallas public keyDfThe <code>EphemeralKeyBytes</code> used in the decryption of the note.CgReturns the expiry height of the transaction, if known.DiReturns the value of <code>expiry_height</code>, or the default value \xe2\x80\xa6CiCreates an enum from field names used in the ProtoBuf \xe2\x80\xa6000000000000CcReturns the block height in which the specified \xe2\x80\xa6BkReturns the ZIP 317 number of grace actions0ChReturns the range of heights for the consensus epoch \xe2\x80\xa6CkReturns the list of all transparent input amounts, providedEcConstructs a new <code>ConfirmationsPolicy</code> with <code>trusted</code> and \xe2\x80\xa6BaSome entry is expected to be nodeClReturns the vector of nullifiers for each transaction in \xe2\x80\xa6BjComputes the total value of Sapling notes.CkReturns the map from payment index to the pool that has \xe2\x80\xa6DiThe index of the entry in the <code>vout</code> field of the previous \xe2\x80\xa60BiThe version of this serialization format.Blthe version of this wire format, for storageCkUpdates the scan queue by inserting scan ranges for the \xe2\x80\xa6ClHelper macro for reading optional fields from a protobuf \xe2\x80\xa6CiReturns the height at which the wallet should exit \xe2\x80\x9c\xe2\x80\xa6DiReturns the value of <code>recover_until</code>, or the default value \xe2\x80\xa6Cnthe block height until which the account should stop being \xe2\x80\xa6BfRedacts the action at the given index.BcRedacts all inputs in the same way.BfRedacts the output at the given index.0BcRedacts all spends in the same way.ChThe script required to spend this output, if it is P2SH.000>CaReturns the range of blocks successfully scanned.ChThe <code>script_pubkey</code> of the input being spent.ClThe script constraining how spending of this output must \xe2\x80\xa6CiReturns the script corresponding to the newly created \xe2\x80\xa621CgSets <code>pool_type</code> to the provided enum value.CgSets <code>tx_status</code> to the provided enum value.DiConstructs a <code>SplitPolicy</code> that prescribes a single output \xe2\x80\xa6dtrueCnReturns the block height that this transaction was created \xe2\x80\xa6DiReturns the value of <code>target_height</code>, or the default value \xe2\x80\xa6CfReturns the target height of the transaction under \xe2\x80\xa6DkReturns a <code>TransferType</code> value that is determined based upon \xe2\x80\xa6BkTruncate one leaf from the end of the tree.CkVerifies that the given seed corresponds to the viewing \xe2\x80\xa6CdThe amount of value added to or removed from the \xe2\x80\xa6ClThe value balance for the bundle. When this is positive, \xe2\x80\xa61DdReturns the <code>WalletTransparentOutput</code> data for this UTXO.Cd<em>Parser for all defined Zcash address types.</em>AoChain history library for ZcashCmBalance information for a single account. The sum of this \xe2\x80\xa6CaA BIP44 private key at the account path level \xe2\x80\xa6CnAn enumeration used to control what information is tracked \xe2\x80\xa6ClThe account for which information was requested does not \xe2\x80\xa6AoA Redactor for Orchard actions.CmNo anchor information could be obtained for the specified \xe2\x80\xa6CjAn error occurred while processing an account due to a \xe2\x80\xa6CnThe transaction balance, or a component thereof, failed to \xe2\x80\xa6CmThe transaction has inputs in excess of outputs and fees; \xe2\x80\xa6CfA trait that represents the ability to compute the \xe2\x80\xa6CjAn error in computations involving the note commitment \xe2\x80\xa6000000CnAn error occurred in inserting data into or accessing data \xe2\x80\xa6C`Wrapper for commitment tree invariant violationsBgErrors that can be generated by the \xe2\x80\xa6ClThe address, or an address at a greater child index, has \xe2\x80\xa6BoAn Redactor for the global transaction details.ClA failure occurred trying to retrieve an unspent note or \xe2\x80\xa6CeThe key data could not be decoded from its string \xe2\x80\xa60BdMax serialized length of entry data.CmA memo value exceeded 512 bytes in length or could not be \xe2\x80\xa60CjThe main in-memory wallet database. Implements all the \xe2\x80\xa6CkAn event that occurs at a specified height on the Zcash \xe2\x80\xa6CmThe requested transaction ID corresponds to a transaction \xe2\x80\xa6CjAn enumeration of constraints that can be applied when \xe2\x80\xa6BoThe output of a transaction sent by the wallet.BcA Redactor for transparent outputs.AoA Redactor for Sapling outputs.CmRawTransaction contains the complete transaction data. It \xe2\x80\xa6BmAn opaque type for received note identifiers.CkThe unique identifier and value for each proposed input \xe2\x80\xa6CeA reference to the output of a prior step is invalid.DjAn <code>InputSize</code> corresponding to the upper bound on the size \xe2\x80\xa6ClThe protocol-specific note commitment and nullifier data \xe2\x80\xa6CjA key that can be used to perform trial decryption and \xe2\x80\xa6CdRecord storing the sent information for a given noteBmThe Sapling inputs to a proposed transaction.CkA wrapper for a SQLite transaction affecting the wallet \xe2\x80\xa6AlA checkpoint in a shard treeDjA helper trait for converting a <code>ZcashAddress</code> into another \xe2\x80\xa6AbA Unified Address.0B`The PCZT has an unknown version.CnThe serialization version returned by the protobuf was not \xe2\x80\xa6CdThe output was received on one of the wallet\xe2\x80\x99s \xe2\x80\xa6CiA migrator that sets up the internal structure of the \xe2\x80\xa6CnAdds a P2SH coin (the output of a previous transaction) to \xe2\x80\xa60CmReturns the available block metadata for the block at the \xe2\x80\xa6CeBuilds a PCZT from the configured spends and outputs.ClBuilds a bundle containing the given inputs and outputs, \xe2\x80\xa60CkReturns whether this address has the ability to receive \xe2\x80\xa6DiReturns whether or not this <code>Address</code> can receive funds in \xe2\x80\xa60Ciinformation about the state of the chain as of this blockCnReturns the internal address corresponding to the smallest \xe2\x80\xa60BjCreates a constant ZatBalance from an i64.BiCreates a constant ZatBalance from a u64.BgCreates a constant Zatoshis from a u64.CnTells the wallet to track the next available account-level \xe2\x80\xa6CjDerives a transparent address at the provided child index.CjReturns a value that will be used to override the dust \xe2\x80\xa6BlThe encrypted note plaintext for the output.0CkConstructs a Unified Address from a given set of receivers.0EhConstructs a new <code>AccountBirthday</code> from a <code>TreeState</code> returned \xe2\x80\xa6CmReturns the block hash for the block at the given height, \xe2\x80\xa6CmReturn the compact transactions currently in the mempool; \xe2\x80\xa6ClFinds the height of the highest block known to the block \xe2\x80\xa6CgGetTreeState returns the note commitment tree state \xe2\x80\xa6BjReturns a vector of transaction summaries.CdSets up the internal structure of the data database.CgReturns the key derivation metadata for the account \xe2\x80\xa6ClReturns information about every address tracked for this \xe2\x80\xa6DcConverts a <code>MemoBytes</code> value to a ZIP 321 compatible \xe2\x80\xa60AlConstructs a new data store.ClBuild a memory wallet db from protobuf type with version \xe2\x80\xa6CkReturns a record for each Orchard note belonging to the \xe2\x80\xa6>>ClNested message and enum types in <code>ProposedInput</code>.CjReads a CompactSize-prefixed series of elements into a \xe2\x80\xa6DeReads <code>count</code> elements into a collection, assuming the \xe2\x80\xa6DcReads an <code>orchard::Bundle</code> from a v5 transaction format.BfReturns the set of receiver typecodes.0DiReturns the enum value of <code>recipient_type</code>, or the default \xe2\x80\xa6BdRedacts all actions in the same way.BdRedacts all outputs in the same way.0ClReturns the set of Sapling inputs currently committed to \xe2\x80\xa6CkReturns a record for each Sapling note belonging to the \xe2\x80\xa6CkAdds the given delta to this index, returning a maximum \xe2\x80\xa6ClSubtracts the provided value from this height, returning \xe2\x80\xa6DkSubtracts the provided value from this height, returning <code>H0</code>\xe2\x80\xa6BjSubtracts the given delta from this index.CkThe size of this transparent input in a transaction, as \xe2\x80\xa60ChSets <code>rseed_type</code> to the provided enum value.ChSets <code>value_pool</code> to the provided enum value.00CnComputes the signature hash for an input to a transaction, \xe2\x80\xa6DfParses this tree state into a <code>ChainState</code> for use with \xe2\x80\xa6ClReturns the total value of notes received by the account \xe2\x80\xa6CgShifts the start of the block range to the right if \xe2\x80\xa6CiConstructs a value of a unified container type from a \xe2\x80\xa60CiConstructs a <code>BlockHash</code> from the given slice.BoReturns the opaque typed encoding of this item.0CdReturns the verifying keys for the Sapling circuits.CmWrites a NonEmpty container of values to the stream using \xe2\x80\xa6B`<em>Zcash binary encodings.</em>Cn<em>A crate for Zcash protocol constants and value types.</em>CkA data structure used to set the birthday height for an \xe2\x80\xa6ChExplicitly allow the creation of dust change amounts \xe2\x80\xa6CgThe BIP 32 derivation path at which a key can be found.0CbThe information contained in a Zcash block header.DkAn error encountered while converting a parsed <code>ZcashAddress</code>\xe2\x80\xa6CjThe default network used by <code>TestBuilder::new</code>.AlA decrypted shielded output.CnThe output will be sent to the default address of the full \xe2\x80\xa6EhA <code>BundleView</code> for the empty bundle with <code>BundleType::DEFAULT</code> \xe2\x80\xa60CgThe encoding of a compact Sapling output or compact \xe2\x80\xa6CkSelects notes having value greater than or equal to the \xe2\x80\xa6CjThe HRP for a Bech32m-encoded mainnet ZIP 320 TEX address.CjThe HRP for a Bech32m-encoded regtest ZIP 320 TEX address.CjThe HRP for a Bech32m-encoded testnet ZIP 320 TEX address.CbThe HRP for a Bech32m-encoded mainnet Unified FVK.CbThe HRP for a Bech32m-encoded regtest Unified FVK.CbThe HRP for a Bech32m-encoded testnet Unified FVK.CbThe HRP for a Bech32m-encoded mainnet Unified IVK.CbThe HRP for a Bech32m-encoded regtest Unified IVK.CbThe HRP for a Bech32m-encoded testnet Unified IVK.CkThe wallet found one or more notes that given a certain \xe2\x80\xa6BbThe string is an invalid encoding.0CfThe data being decoded had an incorrect length, an \xe2\x80\xa60CnA proposed transaction cannot be built because it requires \xe2\x80\xa6000000ChA requested address typecode was recognized, but the \xe2\x80\xa60CiA convenience type for the note commitments contained \xe2\x80\xa6CkProvided null data is longer than the maximum supported \xe2\x80\xa60Cnrecords where a nullifier was spent by block height and tx \xe2\x80\xa6CfThe unified container only contains transparent items.BbA Redactor for the Orchard bundle.CcConstant for the V1 proposal serialization version.ClA reference to a change or ephemeral output from a prior \xe2\x80\xa6CmA reference to a payment in a prior step of the proposal. \xe2\x80\xa6ChThe proposal violated balance or structural constraints.CjAn address cannot be reserved, or a proposal cannot be \xe2\x80\xa6BbA Redactor for the Sapling bundle.CjA seed was provided that is not relevant to any of the \xe2\x80\xa6CjA transaction that was constructed and sent by the wallet.CmAn enumeration of the standard fee rules supported by the \xe2\x80\xa6ChAn attempted double-spend of a prior step output was \xe2\x80\xa6CmA reference to either a payment or change output within a \xe2\x80\xa6CjThe ZIP 321 request included more payments than can be \xe2\x80\xa60CaThe information contained in a Zcash transaction.CcA memo field was provided for a transparent output.CkThe payment at the wrapped index attempted to include a \xe2\x80\xa60CjWe were provided chain metadata for a block containing \xe2\x80\xa6CfThe size of the note commitment tree for the given \xe2\x80\xa6CnMaps a block height and transaction index to a transaction \xe2\x80\xa6CdZcash Sprout and Sapling groth16 circuit parameters.BiSource metadata for a ZIP 32-derived key.CmIf set, only transactions mined at heights less than this \xe2\x80\xa6DkReturns the value of <code>block_range_end</code>, or the default value \xe2\x80\xa6CnAttempts to construct a witness for each note belonging to \xe2\x80\xa6CmRemoves the spend authorizing key for this spent note, if \xe2\x80\xa6AfRemoves the recipient.0BgRemoves the spend\xe2\x80\x99s full viewing key.BoRemoves the rho value for the note being spent.ClComputes the totals of inputs, suggested change amounts, \xe2\x80\xa6CmReturns the unified address corresponding to the smallest \xe2\x80\xa6CjFind the Unified Address corresponding to the smallest \xe2\x80\xa60CiReturns the address with the lowest valid diversifier \xe2\x80\xa6CmReturns the payment address corresponding to the smallest \xe2\x80\xa60322100CnSearches the space of child indexes for an index that will \xe2\x80\xa6CeThe sequence of indices corresponding to the HD path.0CfDerives an internal spending key given an external \xe2\x80\xa6CjDerives an internal full viewing key used for internal \xe2\x80\xa610DiReturns <code>true</code> if, from the wallet\xe2\x80\x99s current view of the \xe2\x80\xa6CiExtracts the effects of this PCZT bundle as a regular \xe2\x80\xa60CnReturns the size of the note commitment tree as of the end \xe2\x80\xa6BeFinalizes the spends for this bundle.0DfConstructs a new <code>AccountBirthday</code> at the given network \xe2\x80\xa6CeConstructs a new wrapper around the given connection.CjReturns a vector with the IDs of all accounts known to \xe2\x80\xa6BkReturn a list of consecutive compact blocksCkReturn information about this lightwalletd instance and \xe2\x80\xa6AfReturns a transaction.CkReturn the requested full (not compact) transaction (as \xe2\x80\xa6ChReturns whether this address has a Transparent receiver.CeReturns whether this uivk has a transparent key item.10ClReturns the Bech32-encoded human-readable prefix for TEX \xe2\x80\xa6CbThe HRP for a Bech32m-encoded mainnet Unified FVK.CbThe HRP for a Bech32m-encoded mainnet Unified IVK.CfSets up the internal structure of the given wallet \xe2\x80\xa6CjTypes related to the process of selecting inputs to be \xe2\x80\xa6ClReturns the items in the order they were parsed from the \xe2\x80\xa6CmReturns the FVKs contained within this UFVK, in the order \xe2\x80\xa6CmReturns the IVKs contained within this UIVK, in the order \xe2\x80\xa6CiLoad the specified parameters, checking the sizes and \xe2\x80\xa6EcConstructs a new <code>ConfirmationsPolicy</code> with <code>trusted</code> and \xe2\x80\xa6CmReturns the timestamp of the earliest time that the light \xe2\x80\xa6DaReturns the <code>Balance</code> of Orchard funds in the account.ClReturns the Orchard outputs that were decrypted from the \xe2\x80\xa6CfReturns a record for each Orchard note received or \xe2\x80\xa6DfThe change values proposed by the <code>ChangeStrategy</code> that \xe2\x80\xa6BlA list of change or ephemeral output values.DaReturns the <code>Balance</code> of Sapling funds in the account.ClReturns the Sapling outputs that were decrypted from the \xe2\x80\xa6CfReturns a record for each Sapling note received or \xe2\x80\xa6CjReturns the set of Sapling outputs currently set to be \xe2\x80\xa6BjCompress requests with the given encoding.CkReturns the number of notes created in this transaction \xe2\x80\xa6CjReturns the number of bytes needed to encode the given \xe2\x80\xa6CkThe size of this transparent input in a transaction, as \xe2\x80\xa6BiReturns the serialized size of the txout.CkReturns the length of this script as encoded (including \xe2\x80\xa6CdStores the given proprietary value at the given key.0000CjReturns the shielded inputs that have been selected to \xe2\x80\xa6CjReturns the value in the account that may currently be \xe2\x80\xa6CmReturns the total value of shielded (Sapling and Orchard) \xe2\x80\xa6CkDerives the external diversifiable incoming viewing key \xe2\x80\xa60CeReturns the ZatBalance encoded as a signed 64-bit \xe2\x80\xa6CeReturns this Zatoshis encoded as a signed two\xe2\x80\x99s \xe2\x80\xa6DfReturns the internal <code>FullViewingKey</code> component of this \xe2\x80\xa60CkMaps the bundles from one type to another with fallible \xe2\x80\xa6CcSets the gap limits to be used by the wallet in \xe2\x80\xa6DdWrites an <code>orchard::Bundle</code> in the v5 transaction format.CmThe account being added collides with an existing account \xe2\x80\xa6CiThe unified container contains both P2PKH and P2SH items.CkAn attempted double-spend of an output belonging to the \xe2\x80\xa6CjTrait representing the ability to construct a new data \xe2\x80\xa6DfA policy describing how a <code>ChangeStrategy</code> should treat \xe2\x80\xa6Di<code>EphemeralBalance</code> describes the ephemeral input or output \xe2\x80\xa6ClEntry expected to be presented in the tree view while it \xe2\x80\xa6BeThe address is for the wrong network.C`An invalid <code>script_sig</code> was provided.0Co<code>partial_signatures</code> contained an invalid signature.0CiNo account could be found corresponding to a provided \xe2\x80\xa6000000DgThe maximum allowed value representable as a <code>[CompactSize]</code>DgThe Transaction Extractor role requires all <code>script_sig</code> \xe2\x80\xa60Cm<code>partial_signatures</code> contained too few signatures.0C`Constants associated with a given Zcash network.CfAn error occurred in adding an Orchard Output to a \xe2\x80\xa6ClProtobuf requires that enums have a zero discriminant as \xe2\x80\xa6CnThe hash of the parent block given by a proposed new chain \xe2\x80\xa6CfThe payment at the wrapped index did not include a \xe2\x80\xa60BcA Zcash shielded transfer protocol.EeThe <code>is_shielding</code> flag may only be set to <code>true</code> under the \xe2\x80\xa6CnAn error occurred in constructing the transparent parts of \xe2\x80\xa6CkThe note commitment tree size for the given protocol at \xe2\x80\xa6CdErrors that can occur while extracting a regular \xe2\x80\xa60DhThe provided <code>sk</code> does not match any pubkey involved with \xe2\x80\xa60ClReturns the balances of accounts in the wallet, keyed by \xe2\x80\xa6CnA map from a pubkey to the BIP 32 derivation path at which \xe2\x80\xa6000C`Returns whether this address can receive a memo.0BlReturns the height of the current chain tip.DoRemoves the <code>ock</code> value used to encrypt <code>out_ciphertext</code>.BdRemoves the <code>script_sig</code>.DgConstructs a <code>NonHardenedChildIndex</code> from a ZIP 32 child \xe2\x80\xa6BmReturns the donation address for this server.AiZcash donation UA addressAfEnd sapling tree root.CmReturns the estimated chain tip height for the chain this \xe2\x80\xa6Biless than tip height if zcashd is syncingCgDecodes the given message in-place using F4Jumble\xe2\x81\xbb\xc2\xb9.CjReturn the BlockID of the block at the tip of the best \xe2\x80\xa6CiReturns the outputs for a transaction sent by the wallet.CkReturns the storage backend\xe2\x80\x99s internal identifier for \xe2\x80\xa6DkConsumes <code>self</code> and returns the lists of Sapling and Orchard \xe2\x80\xa6BoA low-level variant of the Signer role, for \xe2\x80\xa6CcReturns whether or not this address contains or \xe2\x80\xa6DbParse a <code>MemoBytes</code> value from a ZIP 321 compatible \xe2\x80\xa60CnReturns the size of the Orchard note commitment tree as of \xe2\x80\xa6CkReturns the Orchard note commitment tree frontier as of \xe2\x80\xa6C`Parse Bls12 keys from bytes as serialized by \xe2\x80\xa6ClSelect transaction inputs, compute fees, and construct a \xe2\x80\xa6CoInvokes <code>propose_transfer</code> with the given arguments.CiReads a usize value encoded as a u64 in little-endian \xe2\x80\xa6CnReturns the size of the Sapling note commitment tree as of \xe2\x80\xa6CkReturns the Sapling note commitment tree frontier as of \xe2\x80\xa6AmReturns the seed fingerprint.DfReturns the value of <code>seed_fingerprint</code>, or the default \xe2\x80\xa6AlThe ZIP 32 seed fingerprint.0CaSubmit the given transaction to the Zcash networkCjSets <code>request_type</code> to the provided enum value.CkSets the user-facing address that the new note is being \xe2\x80\xa60CfMappings of the form <code>key = SHA256(value)</code>.0ClReturns the number of notes spent by the account in this \xe2\x80\xa6DgConverts this receiver to a <code>ZcashAddress</code> for the given \xe2\x80\xa6EfSerializes this <code>UnifiedAddress</code> as a <code>ZcashAddress</code> for the \xe2\x80\xa6DoConverts this <code>Address</code> to its encoded <code>ZcashAddress</code> \xe2\x80\xa6210CfReturns the total number of unspent shielded notes \xe2\x80\xa6CfAttempts to parse the given string as a Zcash address.CgThe caller should respond to this request only with \xe2\x80\xa6CmReturns the value in the account of notes that have value \xe2\x80\xa6CmReturns the value in the account of notes and transparent \xe2\x80\xa6BnUpdates the wallet\xe2\x80\x99s view of the blockchain.BkAdds a block cache to the test environment.Bb<em>General Zcash primitives.</em>C`An error occurred in generating a Zcash address.CfAn error occurred in migrating a Zcash address or key.CnThe wallet does not contain derivation information for the \xe2\x80\xa6CeThe unified container contains a duplicated typecode.BjA fake output of a <code>CompactTx</code>.BcThe initial chain state for a test.CnUnable to create a new spend because the wallet balance is \xe2\x80\xa600000ClInsufficient funds were available to satisfy the payment \xe2\x80\xa61ClInsufficient inputs were provided to change selection to \xe2\x80\xa6CgInsufficient funds were provided to the transaction \xe2\x80\xa6CmThe lightwalletd server returned invalid information, and \xe2\x80\xa6CnA bundle could not be built because required signatures on \xe2\x80\xa60CjA bundle could not be built because a required signing \xe2\x80\xa60BhThe wallet contains no derived accounts.CkA note selection query contained an invalid constant or \xe2\x80\xa6CiType for running pool-agnostic tests on the Orchard pool.DhThe type of the backing <code>ShardStore</code> for the Orchard note \xe2\x80\xa6CkA mapping from ZIP 321 payment index to the output pool \xe2\x80\xa6CiType for running pool-agnostic tests on the Sapling pool.DhThe type of the backing <code>ShardStore</code> for the Sapling note \xe2\x80\xa6CmA strategy for selecting transaction inputs and proposing \xe2\x80\xa6CeThe primary error type for the SQLite wallet backend.CjMetadata about the status of a transaction obtained by \xe2\x80\xa6CjThe requested transaction ID was not recognized by the \xe2\x80\xa6CfTransparent inputs provided to the fee calculation \xe2\x80\xa6CaThe provided script contains unsupported opcodes.0DhThe provided <code>redeem_script</code> does not match the input\xe2\x80\x99s \xe2\x80\xa6000AoEnable decompressing responses.CjReturns the activation height for a particular network \xe2\x80\xa6C`Adds an Orchard note to be spent in this bundle.CdAdds a Sapling note to be spent in this transaction.CjReturns block metadata for the maximum height that the \xe2\x80\xa6ClOnly transactions mined at heights greater than or equal \xe2\x80\xa6DgReturns the value of <code>block_range_start</code>, or the default \xe2\x80\xa6AoRemoves all proprietary values.0000BkRemoves the spend authorization randomizer.CeRemoves the seed randomness for the note being spent.AlRemoves the spend\xe2\x80\x99s value.CiReturns whether this address contains the given receiver.CmDerives the BIP44 private spending key for the child path \xe2\x80\xa6CiReturns the ephemeral address to which the output was \xe2\x80\xa6CjUses the provided metadata source to obtain the wallet \xe2\x80\xa6CjReads an ZatBalance from a signed 64-bit little-endian \xe2\x80\xa6CmReads an ZatBalance from an unsigned 64-bit little-endian \xe2\x80\xa6CkReads an Zatoshis from an unsigned 64-bit little-endian \xe2\x80\xa6CgCreates a fake block with the given height and hash \xe2\x80\xa6CnReturns the note IDs for shielded notes sent by the wallet \xe2\x80\xa6CnReturns a stream of information about roots of subtrees of \xe2\x80\xa6CjReturns the total balance in the given account at this \xe2\x80\xa6DaMappings of the form <code>key = RIPEMD160(SHA256(value))</code>.0CnMappings of the form <code>key = SHA256(SHA256(value))</code>.0ClTells the wallet to track a specific account index for a \xe2\x80\xa6ChSets up the internal structure of the metadata cache \xe2\x80\xa6CiReturns whether transparent inputs can be added to or \xe2\x80\xa6EhChecks whether <code>soln</code> is a valid solution for <code>(input, nonce)</code> \xe2\x80\xa6ChReturns the target height for which the proposal was \xe2\x80\xa6ChThe target height for which the proposal was constructedClReturns the size of the Orchard note commitment tree for \xe2\x80\xa6DgReturns the <code>ChainState</code> corresponding to the last block \xe2\x80\xa6Cnthe chain state at the block height before the account was \xe2\x80\xa6CgReturns the inputs that should be obtained from the \xe2\x80\xa6CnConstructs a proposal to shield all of the funds belonging \xe2\x80\xa6CkPerforms input selection and returns a proposal for the \xe2\x80\xa6D`Invokes <code>propose_shielding</code> with the given arguments.BbInsert shard roots for both trees.CbReturns the wallet address that received the UTXO.0CnReturns the payment address to which the payment should be \xe2\x80\xa6ClReturns the address to which the TxOut was sent, if this \xe2\x80\xa601ClReturns the size of the Sapling note commitment tree for \xe2\x80\xa6BlSets the account index for the test account.BfSets the redeem script for this input.BgSets the redeem script for this output.10DdReturns the enum value of <code>shielded_protocol</code>, or the \xe2\x80\xa6BmShielded protocol to return subtree roots forCbExposes the capability to sign the Orchard spends.DgReturns the <code>BlockMetadata</code> corresponding to the scanned \xe2\x80\xa6CiUpdates the input at the given index with information \xe2\x80\xa60CkReturns the maximum block height at which a transparent \xe2\x80\xa6CbImplements the Signature Digest section of ZIP 244CjWrites a usize value encoded as a u64 in little-endian \xe2\x80\xa6AjZcash transparent protocolB`example: \xe2\x80\x9c/MagicBean:4.1.1/\xe2\x80\x9dCmThe given account cannot be used for spending, because it \xe2\x80\xa6000000ChThe height of the chain was not available; a call to \xe2\x80\xa6ClRaised when the caller attempts to add a checkpoint at a \xe2\x80\xa6ClA struct containing metadata about a subtree root of the \xe2\x80\xa6CmParsing encountered a duplicate ZIP 321 URI parameter for \xe2\x80\xa60CdAn external signature is valid for more than one \xe2\x80\xa60CnResults are sorted by height, which makes it easy to issue \xe2\x80\xa6CnTrait representing a transparent \xe2\x80\x9cincoming viewing key\xe2\x80\x9d\xe2\x80\xa6ChThe number of inputs does not match number of sighashes.0CkThe type of errors that may be produced in input selection.CbAn invalid <code>sighash_type</code> was provided.0CmAn error occurred deriving a spending key from a seed and \xe2\x80\xa6BmMaximum serialized size of the node metadata.ChA type used to filter transactions to be returned in \xe2\x80\xa6CmErrors that may be generated in construction of proposals \xe2\x80\xa6BgThe sapling spend parameters file name.CmTrait that exposes the pool-specific types and operations \xe2\x80\xa6BjThe proposed change outputs and fee value.CdThe amount of change and fees required to make a \xe2\x80\xa6AmA ZIP321 transaction request.0CfInformation about a transaction that the wallet is \xe2\x80\xa6CjAn error encountered in decoding a transparent address \xe2\x80\xa6CnA transparent address corresponding to either a public key \xe2\x80\xa6CiA set of spending keys that are all associated with a \xe2\x80\xa60CmAn error indicating that an address type is not supported \xe2\x80\xa6CgA unified address did not contain a supported receiver.CcA type alias for Orchard <code>WalletSpend</code>s.CcA type alias for Sapling <code>WalletSpend</code>s.DdAdds both a spend and an output to the given <code>CompactTx</code>.BmAdds an Orchard recipient to the transaction.BhAdds a Sapling address to send funds to.CgRemoves the seed randomness for the note being created.AmRemoves the output\xe2\x80\x99s value.CkRemoves the user-facing address to which this output is \xe2\x80\xa60CnConverts this address into another type, if it matches the \xe2\x80\xa6DeDivides this <code>Zatoshis</code> value by the given divisor and \xe2\x80\xa6BiReturns the recipient of the sent output.CjCreate a fake CompactBlock at the given height, with a \xe2\x80\xa6ClReturns the frontier of the Orchard note commitment tree \xe2\x80\xa6ClReturns the frontier of the Sapling note commitment tree \xe2\x80\xa6CnConstructs a <code>ScanningKeys</code> from an iterator of \xe2\x80\xa6CkExtracts the note commitments from the given compact block.CfReturns the address that this Script contains, if any.CnReturn a stream of current Mempool transactions. This will \xe2\x80\xa6CmReturns the amount of change in the given account that is \xe2\x80\xa6CmFetches a spendable note by indexing into a transaction\xe2\x80\x99\xe2\x80\xa6CfReturn the transactions corresponding to the given \xe2\x80\xa6DhReturns a <code>WalletSummary</code> that represents the sync status \xe2\x80\xa6CjReturns a summary of the wallet at this point in the test.DeReturns whether the transaction has a <code>SIGHASH_SINGLE</code> \xe2\x80\xa6DkConsumes this value and returns the <code>WalletTransparentOutput</code>\xe2\x80\xa6CjEntry expected to be a node (specifying for which link \xe2\x80\xa6CjReturns whether transparent outputs can be added to or \xe2\x80\xa6CnDerives the internal ovk and external ovk corresponding to \xe2\x80\xa6CaA map from a pubkey to a signature created by it.0CjReads a CompactSize-prefixed series of elements into a \xe2\x80\xa6DeReads <code>count</code> elements into a collection, assuming the \xe2\x80\xa6CiRedacts the global transaction details with the given \xe2\x80\xa6BoRedacts the proprietary value at the given key.0000DjScans at most <code>limit</code> blocks from the provided block source \xe2\x80\xa6DeInvokes <code>scan_cached_blocks</code> with the given arguments, \xe2\x80\xa6ClSets <code>recipient_type</code> to the provided enum value.DgReturns the <code>Scope</code> of the spending key required to make \xe2\x80\xa6AhStart sapling tree root.CkCaches a decrypted transaction in the persistent wallet \xe2\x80\xa6ChSubtree commitment - either block hash for leaves or \xe2\x80\xa6CmReturns the block height at which the leaf that completed \xe2\x80\xa6AhPart of tree total work.CnReturns the Sapling address corresponding to this address, \xe2\x80\xa60CmReturns the transparent inputs that have been selected to \xe2\x80\xa6CmReturns the set of transparent inputs currently committed \xe2\x80\xa6CjTruncates the wallet database to at most the specified \xe2\x80\xa6CjDeletes block data from the cache, retaining blocks at \xe2\x80\xa6CnTruncates the test wallet and block cache to the specified \xe2\x80\xa6BkTruncates the database to the given height.DcRewinds the BlockMeta Db to the <code>block_height</code> provided.DdReturns the <code>Balance</code> of unshielded funds in the account.CnUpdates the global transaction details with information in \xe2\x80\xa6CiUpdates the input at the given index with information \xe2\x80\xa60CkReturns the enforcement policy for ZIP 212 at the given \xe2\x80\xa6BlA compact representation of a Sapling Spend.CnA description of the policy that is used to determine what \xe2\x80\xa6ChThe output will be sent to the specified diversified \xe2\x80\xa6CkAn inputs field for the given protocol was present, but \xe2\x80\xa6AoA Sapling extended spending key0CnThe fee rule specified by the proposal is not supported by \xe2\x80\xa6DcAn <code>InputSelector</code> implementation that uses a greedy \xe2\x80\xa6CfThe HRP for a Bech32m-encoded mainnet Unified Address.CfThe HRP for a Bech32m-encoded regtest Unified Address.CfThe HRP for a Bech32m-encoded testnet Unified Address.CcAn invalid <code>redeem_script</code> was provided.0CcAn invalid <code>script_pubkey</code> was provided.0Ef<code>script_pubkey</code> is a P2SH script, but <code>redeem_script</code> is not \xe2\x80\xa60ClA range of blocks provided to the database as a unit was \xe2\x80\xa6CjThe proposal included a payment to a TEX address and a \xe2\x80\xa6CmErrors that may be generated in construction of proposals \xe2\x80\xa6CiAn enumeration of the ways in which a receiver may be \xe2\x80\xa60Ef<code>script_pubkey</code> is a P2SH script, but <code>redeem_script</code> is too \xe2\x80\xa60CnThe total output value of the transaction request is not a \xe2\x80\xa6BhThe sapling output parameters file name.CjErrors that can occur while finalizing the transparent \xe2\x80\xa60AoThe scope of a transparent key.BfA Redactor for the transparent bundle.AeUnsupported pool typeBoThe version group ID for Zcash v3 transactions.BoThe version group ID for Zcash v4 transactions.BoThe version group ID for Zcash v5 transactions.DkThe output part of an Orchard <code>Action</code> that was decrypted in \xe2\x80\xa6DiA subset of an <code>OutputDescription</code> relevant to wallets and \xe2\x80\xa6BjThe \xe2\x80\x9cgrace period\xe2\x80\x9d defined in ZIP 212.CkReturns the net change in balance that this transaction \xe2\x80\xa6CmAdds the specified value to the spendable total, checking \xe2\x80\xa6CmReturns the metadata for the block at the height to which \xe2\x80\xa6BgRemoves the <code>redeem_script</code>.0CmRemoves the witness from the spent note to the bundle\xe2\x80\x99s \xe2\x80\xa6CgThe consensus branch ID for the chain in which this \xe2\x80\xa6CmReturns the current consensus branch ID for the chain tip \xe2\x80\xa6Boprotocol identifier, see consensus/upgrades.cppChReturns the consensus branch ID for the given node data.ClConsensus branch id, should be provided by deserializing \xe2\x80\xa6CnReturns the Zcash epoch that this transaction can be mined \xe2\x80\xa6CnAttempts to decrypt the given address\xe2\x80\x99s diversifier with \xe2\x80\xa60DdScans a <code>Transaction</code> for any information that can be \xe2\x80\xa6CjDerives the BIP44 public key at the external \xe2\x80\x9cchange \xe2\x80\xa6CjDerives the BIP44 public key at the internal \xe2\x80\x9cchange \xe2\x80\xa6BmDetermines the lock time for the transaction.CnReturns the payment address corresponding to the specified \xe2\x80\xa60CnDownload the Zcash Sapling parameters if needed, and store \xe2\x80\xa6Bimap from index to encoded unified addressCkFinalizes the signing process and attempts to build the \xe2\x80\xa60CdCreates a fake block at the expected next height \xe2\x80\xa6C`Returns the account corresponding to a given \xe2\x80\xa6CjReturns the block height and hash for the block at the \xe2\x80\xa6BgReturns a transaction from the history.BkReturns the birthday height for the wallet.CfThe HRP for a Bech32m-encoded mainnet Unified Address.CmTells the wallet to track an account using a unified full \xe2\x80\xa6CeSets up the internal structure of the cache database.ClReturns the list of all transparent input scriptPubKeys, \xe2\x80\xa6ChReturns whether this error is the result of a failed \xe2\x80\xa6CnReturns the cached chain state corresponding to the latest \xe2\x80\xa6ClRoots of the completed Orchard subtrees as of this chain \xe2\x80\xa6ClRoots of the completed Sapling subtrees as of this chain \xe2\x80\xa6CgPerforms input selection and returns a proposal for \xe2\x80\xa6CiDerives the secp256k1 public key corresponding to the \xe2\x80\xa60CkReturns the number of notes created in this transaction \xe2\x80\xa6Bathe notes received by this walletCkReturns the transparent key scope at which this address \xe2\x80\xa6CmThe ZIP 32 scope for which the viewing key that decrypted \xe2\x80\xa6DfReturns the enum value of <code>recipient_key_scope</code>, or the \xe2\x80\xa6CbRedacts the Orchard bundle with the given closure.CbRedacts the Sapling bundle with the given closure.CiMappings of the form <code>key = RIPEMD160(value)</code>.0ClSchedules a UTXO check for the given address at a random \xe2\x80\xa6DcStores the given value along with <code>key = SHA256(value)</code>.0CnReturns whether shielded spends or outputs can be added to \xe2\x80\xa6ClReturns a vector of suggested scan ranges based upon the \xe2\x80\xa6CgReturns the number of outputs that this policy will \xe2\x80\xa6CfReturns the transaction request that describes the \xe2\x80\xa6BfZIP 321 serialized transaction requestCnReturns the set of transparent outputs currently set to be \xe2\x80\xa6ClUpdates the Orchard bundle with information in the given \xe2\x80\xa6Bl<em>An SQLite-based Zcash light client.</em>CkThe address associated with a record being inserted was \xe2\x80\xa60000000DgAn error occurred in <code>bip32</code> derivation of a transparent \xe2\x80\xa60BnA compact representation of an Orchard Action.BmA compact representation of a Sapling Output.CnA feature required by the wallet database is not supported \xe2\x80\xa6CjA transaction that was detected during scanning of the \xe2\x80\xa6CjThe items in the unified container are not in typecode \xe2\x80\xa6CcThe parsed typecode exceeds the maximum allowed \xe2\x80\xa6CiAttempted to create a spend to an unsupported Unified \xe2\x80\xa6000000CjAn end-exclusive iterator over a range of non-hardened \xe2\x80\xa6DgThe caller responded to a <code>TransactionsInvolvingAddress</code> \xe2\x80\xa6CnThe height of subtree roots in the Orchard note commitment \xe2\x80\xa6ClThere was a mismatch between the payments in the proposal\xe2\x80\xa6ClThe proposal was structurally valid, but tried to do one \xe2\x80\xa6000000CmErrors that may be generated in construction of proposals \xe2\x80\xa6ClAn attempt to import a transparent pubkey failed because \xe2\x80\xa6CeSpecification for how a unified address should be \xe2\x80\xa60CnThe height of subtree roots in the Sapling note commitment \xe2\x80\xa6CmRaised when attempting to add shard roots to the database \xe2\x80\xa6CjStores the block height corresponding to the last note \xe2\x80\xa6D`<code>partial_signatures</code> contained unexpected signatures.0ChAdds a zero-value \xe2\x80\x9cnull data\xe2\x80\x9d (OP_RETURN) output \xe2\x80\xa60CkAdds the specified value to the uneconomic value total, \xe2\x80\xa6BhRemoves the spend authorizing signature.0ClRemoves the spending key for this spent note, if it is a \xe2\x80\xa6CfDerives the public key at the \xe2\x80\x9cephemeral\xe2\x80\x9d path \xe2\x80\xa6BnCreates a non-negative ZatBalance from an i64.AoCreates a Zatoshis from an i64.CgReturns the height below which all blocks have been \xe2\x80\xa6CmAdds an empty block to the cache, advancing the simulated \xe2\x80\xa6ClReturns the birthday height for the given account, or an \xe2\x80\xa6C`Returns the account corresponding to a given \xe2\x80\xa6CkReturns metadata describing the structure of the wallet \xe2\x80\xa6CgReturns metadata for the spendable notes in the wallet.CgSame as GetBlock except actions contain only nullifiersCkReturns whether this address has the ability to receive \xe2\x80\xa6DjReturns the value of <code>orchard_action_count</code>, or the default \xe2\x80\xa6Bkthe number of Orchard actions in this blockCgThe caller should respond to this request only with \xe2\x80\xa6CfThe vector of selected payment index / output pool \xe2\x80\xa6DdReads a legacy <code>CommitmentTree</code> from its serialized form.Anthe notes spent by this walletDjReturns the value of <code>sapling_output_count</code>, or the default \xe2\x80\xa6Bkthe number of Sapling outputs in this blockCnReturns the list of notes belonging to the wallet that are \xe2\x80\xa6CeSets the BIP 32 derivation path for the given pubkey.000BeStores the given value along with \xe2\x80\xa6000CkSuggests the transaction version that should be used in \xe2\x80\xa6ChReturns the test account\xe2\x80\x99s Orchard FVK, if one was \xe2\x80\xa6CiReturns the test account\xe2\x80\x99s Sapling DFVK, if one was \xe2\x80\xa6ChAdds a set of block metadata entries to the metadata \xe2\x80\xa6Cf<em>A crate for implementing Zcash light clients.</em>ClThe prefix for a Base58Check-encoded DER-encoded mainnet \xe2\x80\xa6ClThe prefix for a Base58Check-encoded DER-encoded regtest \xe2\x80\xa6ClThe prefix for a Base58Check-encoded DER-encoded testnet \xe2\x80\xa6CmThe backend encountered an attempt to reuse a diversifier \xe2\x80\xa6C`A child index for a derived transparent address.CeAn end-exclusive range of non-hardened child indexes.DkErrors that can occur in the process of decoding a <code>Proposal</code>\xe2\x80\xa6BiThe paths to the Sapling parameter files.CcAn output of a transaction generated by the wallet.CjAn error produced in legacy transparent address derivationBbA set of transparent signing keys.0CeSpecification for how a unified address should be \xe2\x80\xa60BcA ZIP 316 unified full viewing key.0C`Attempted to send change to an unsupported pool.000000CgSupport for transparent-source-only (TEX) addresses \xe2\x80\xa6CaAn invalid value pool identifier was encountered.CmThis trait describes a capability for manipulating wallet \xe2\x80\xa6CeAdds a transparent P2PKH coin to be spent in this \xe2\x80\xa6CmReturns the human-readable prefix for Base58Check-encoded \xe2\x80\xa6B`Removes the spend\xe2\x80\x99s recipient.CbThe hash of the block that completed this subtree.CeReturns the default folder that the Zcash proving \xe2\x80\xa6CkDerives the BIP44 public key at the \xe2\x80\x9caddress level\xe2\x80\x9d \xe2\x80\xa6CdConstructs a new ephemeral transparent output value.CiExtracts the BIP 44 account index, scope, and address \xe2\x80\xa60CkGenerates, persists, and marks as exposed a diversified \xe2\x80\xa6CkReturns the maximum height of blocks known to the block \xe2\x80\xa6CnReturns the balance in the given account that is spendable \xe2\x80\xa6CeReturns whether the transaction has decrypted outputsCnConvenience method for obtaining the NU5 activation height \xe2\x80\xa6CeConvenience method for choosing a set of receiver \xe2\x80\xa60CoSets <code>shielded_protocol</code> to the provided enum value.ChReturns whether the specified Orchard note should be \xe2\x80\xa6ChReturns whether the specified Sapling note should be \xe2\x80\xa6CgReturns the key scope if this is a transparent address.CnReturns the transparent key scope at which the address was \xe2\x80\xa6CcMap from spends to their location in the blockchainDiAttempts to create a <code>LocalTxProver</code> using parameters from \xe2\x80\xa6DjConstructs a new <code>SplitPolicy</code> that splits change to ensure \xe2\x80\xa6CmEvaluates the given callback function with a reference to \xe2\x80\xa60DeSerializes a legacy <code>CommitmentTree</code> as an array of bytes.CiNo account could be found corresponding to a provided ID.000000CfErrors that can occur in the generation of unified \xe2\x80\xa60CgChange outputs to the specified pool are not supported.CnA requested rewind would violate invariants of the storage \xe2\x80\xa6CiA request for transaction data enhancement, spentness \xe2\x80\xa6CjA record storing transaction data in the transaction tableCcThe account was imported, and ZIP-32 derivation \xe2\x80\xa6BlAdds a transparent address to send funds to.BdRemoves all BIP 32 derivation paths.0BaRemoves the output\xe2\x80\x99s recipient.AmRemoves all SHA256 preimages.ClRemoves the ZIP 32 derivation path at which the spending \xe2\x80\xa60DcDecodes a <code>PaymentAddress</code> from a Bech32-encoded string.0D`Writes a <code>PaymentAddress</code> as a Bech32-encoded string.0CfReturns the address that this Script contains, if any.CmSerializes a <code>Proposal</code> based upon a supported \xe2\x80\xa6ClReturns the nullifiers for Orchard notes that the wallet \xe2\x80\xa6ClReturns the nullifiers for Sapling notes that the wallet \xe2\x80\xa6CgFetches the transparent output corresponding to the \xe2\x80\xa6BmReads a Merkle path from its serialized form.CgReturns the minimum value for a note resulting from \xe2\x80\xa6ChNotifies the wallet backend that the given query for \xe2\x80\xa6CgReturns the Orchard bundle type and anchor for this \xe2\x80\xa6BoRedacts the SHA256 preimage for the given hash.CgReturns the Sapling bundle type and anchor for this \xe2\x80\xa6CmReturns a list of spendable notes sufficient to cover the \xe2\x80\xa6DfStores the given value along with <code>key = RIPEMD160(value)</code>.0CnUpdates the wallet backend with respect to the status of a \xe2\x80\xa6CiReturns the transparent address corresponding to this \xe2\x80\xa60EgAttempts to decode an <code>Address</code> value from its <code>ZcashAddress</code> \xe2\x80\xa60DaInvokes <code>scan_cached_blocks</code> with the given arguments.CmSets the notifier channel, where progress of building the \xe2\x80\xa6CcLeaf migrations as of the current repository state.ClSince Blossom activation, the default transaction expiry \xe2\x80\xa6CmThe change strategy provided to input selection failed to \xe2\x80\xa6Cfassociates a note and a transaction where it was spentCkA struct used to return the vectors of note commitments \xe2\x80\xa6CiA type describing the mined-ness of transactions that \xe2\x80\xa6CcThe <code>redeem_script</code> kind is unsupported.0CcThe <code>script_pubkey</code> kind is unsupported.000BnA transparent output controlled by the wallet.ChReturns the set of receivers in the unified address, \xe2\x80\xa60AnRemoves all HASH160 preimages.AnRemoves all HASH256 preimages.BnRemoves all spend-specific proprietary values.CnThe height of the block that completed this subtree in the \xe2\x80\xa6ClGenerates the \xe2\x80\x9copenssh-inspired\xe2\x80\x9d DER encoding of the \xe2\x80\xa60DhConstructs a new <code>AccountBirthday</code> at Sapling activation, \xe2\x80\xa6ChRedacts the BIP 32 derivation path for the given pubkey.0C`Redacts the HASH160 preimage for the given hash.C`Redacts the HASH256 preimage for the given hash.CfRedacts the transparent bundle with the given closure.ClThe minimum Unix timstamp that this input requires to be \xe2\x80\xa60DaSets <code>recipient_key_scope</code> to the provided enum value.CaAdds a wallet data store to the test environment.CkThe block height field of the proposed new block is not \xe2\x80\xa6CkSelects notes having value greater than or equal to the \xe2\x80\xa6CjErrors that can occur as a consequence of greedy input \xe2\x80\xa6CgA provided external signature was not valid for any \xe2\x80\xa60CnA requested address typecode was not recognized, so we are \xe2\x80\xa60CnA Unified address cannot be generated without at least one \xe2\x80\xa60BmSource information for a transparent address.CiAdds the specified value to the pending change total, \xe2\x80\xa6BoRemoves all output-specific proprietary values.AgRemoves all signatures.DfReturns the value of <code>commitment_tree_position</code>, or the \xe2\x80\xa6DdConstructs an <code>OvkPolicy::Custom</code> value from a single \xe2\x80\xa6CjDerives a transparent address at the provided child index.DiWrites a <code>PaymentAddress</code> as a Bech32-encoded string using \xe2\x80\xa60CdReturns a mapping from each transparent receiver \xe2\x80\xa60DbReads an <code>IncrementalWitness</code> from its serialized form.BkRedacts the signature for the given pubkey.CmRedacts the spend-specific proprietary value at the given \xe2\x80\xa6CdConstructs a transaction that consumes available \xe2\x80\xa6DgInvokes <code>shield_transparent_funds</code> with the given arguments.CiReturns the number of our previously-detected Orchard \xe2\x80\xa6CiReturns the number of our previously-detected Sapling \xe2\x80\xa6DdConstructs the <code>ReceiverRequirements</code> that requires a \xe2\x80\xa60ClSets the external migration graph to apply alongside the \xe2\x80\xa6CmConfigures the test to start with the given initial chain \xe2\x80\xa6DgProvides a mutable reference to the <code>Balance</code> of Orchard \xe2\x80\xa6DgProvides a mutable reference to the <code>Balance</code> of Sapling \xe2\x80\xa6DhThe prefix for a Base58Check-encoded mainnet <code>PublicKeyHash</code>.ClThe prefix for a Base58Check-encoded regtest transparent \xe2\x80\xa6ClThe prefix for a Base58Check-encoded testnet transparent \xe2\x80\xa6DeThe prefix for a Base58Check-encoded mainnet <code>ScriptHash</code>.21CgThe prefix for a Base58Check-encoded mainnet Sprout \xe2\x80\xa6CgThe prefix for a Base58Check-encoded regtest Sprout \xe2\x80\xa6CgThe prefix for a Base58Check-encoded testnet Sprout \xe2\x80\xa6CjDigester which constructs a digest of only the witness \xe2\x80\xa6CgThe space of available diversifier indices has been \xe2\x80\xa60CjEphemeral outputs to the specified pool are not supported.CmA change strategy that attempts to split the change value \xe2\x80\xa6CiA change strategy that proposes change as potentially \xe2\x80\xa6CnThe standard size of a P2PKH input, in bytes, according to \xe2\x80\xa6BgA ZIP 316 unified incoming viewing key.0CjReturns whether or not transparent inputs may be spent \xe2\x80\xa6CmReturns the human-readable prefix for Base58Check-encoded \xe2\x80\xa600CjRemoves the user-facing address to which the output is \xe2\x80\xa6B`Removes all RIPEMD160 preimages.CkConstructs a new <code>SpendingKeys</code> value from a \xe2\x80\xa6CdCreates a fake block at the expected next height \xe2\x80\xa6CfReturn the transactions corresponding to the given \xe2\x80\xa6CjReturns the set of non-ephemeral transparent receivers \xe2\x80\xa6BmLimits the maximum size of a decoded message.BnLimits the maximum size of an encoded message.EcConstructs a new <code>ConfirmationsPolicy</code> with <code>trusted</code> and \xe2\x80\xa6BmReturns the ZIP 317 standard P2PKH input sizeClSelect transaction inputs, compute fees, and construct a \xe2\x80\xa6CoInvokes <code>propose_transfer</code> with the given arguments.DfInvokes <code>propose_standard_transfer_to_address</code> with the \xe2\x80\xa6CkAdds a sequence of Orchard note commitment tree subtree \xe2\x80\xa6ClAdds a sequence of note commitment tree subtree roots to \xe2\x80\xa60CkAdds a sequence of Sapling note commitment tree subtree \xe2\x80\xa6CnRedacts the output-specific proprietary value at the given \xe2\x80\xa6CbRedacts the RIPEMD160 preimage for the given hash.CkThe minimum block height that this input requires to be \xe2\x80\xa60CkConvenience method for obtaining the Sapling activation \xe2\x80\xa6ClReturns the Sapling activation height for the chain this \xe2\x80\xa6Amdepends on mainnet or testnetDiReturns the serialized size of a vector of <code>u8</code> as written \xe2\x80\xa6DgReturns a vector of <code>TransactionDataRequest</code> values that \xe2\x80\xa6CmQueue of transaction data requests the wallet should make \xe2\x80\xa6DcSerializes an <code>IncrementalWitness</code> as an array of bytes.ClA proposal step created an ephemeral output that was not \xe2\x80\xa6CgSelects notes having value greater than or equal to \xe2\x80\xa6CkThe builder was constructed with a target height before \xe2\x80\xa6ClThe standard size of a P2PKH output, in bytes, according \xe2\x80\xa6CgThe builder was constructed without support for the \xe2\x80\xa6CnA change strategy that proposes change as a single output. \xe2\x80\xa60CmInformation about a transparent address controlled by the \xe2\x80\xa6Dk<code>redeem_script</code> contained an uncompressed pubkey, which PCZT \xe2\x80\xa60CdAdds a transparent P2SH coin to be spent in this \xe2\x80\xa6DjA macro to be used by [<code>ambassador::Delegate</code>] to delegate [\xe2\x80\xa60CeAppends a new batch of external signatures to the \xe2\x80\xa60BaRemoves the proof generation key.BaGenerated client implementations.EhDecodes an <code>ExtendedFullViewingKey</code> and the <code>NetworkType</code> that \xe2\x80\xa60DhDecodes a <code>TransparentAddress</code> from a Base58Check-encoded \xe2\x80\xa60CkDerives the BIP44 private spending key for the external \xe2\x80\xa6CkDerives the BIP44 private spending key for the internal \xe2\x80\xa6CmReturns the change address corresponding to the specified \xe2\x80\xa60CmDownload the Zcash Sprout parameters if needed, and store \xe2\x80\xa6DeWrites a <code>TransparentAddress</code> as a Base58Check-encoded \xe2\x80\xa60CeSame as GetBlockRange except actions contain only \xe2\x80\xa6CfGenerates, persists, and marks as exposed the next \xe2\x80\xa6CiReturns the maximum block height among those at which \xe2\x80\xa6CkReturns the Orchard subtree index that should start the \xe2\x80\xa6CkReturns the Sapling subtree index that should start the \xe2\x80\xa6BnReturns the ZIP 317 standard P2PKH output sizeDdAttempts to parse a <code>Proposal</code> based upon a supported \xe2\x80\xa6CnReturns the value in the account of all remaining received \xe2\x80\xa6ChReturns the value of shielded funds that are not yet \xe2\x80\xa6CfA Sapling key that provides the capability to view \xe2\x80\xa60CnThe requested proposal would link activity on an ephemeral \xe2\x80\xa6DkThe HRP for a Bech32-encoded mainnet Sapling <code>PaymentAddress</code>\xe2\x80\xa6DkThe HRP for a Bech32-encoded regtest Sapling <code>PaymentAddress</code>\xe2\x80\xa6DkThe HRP for a Bech32-encoded testnet Sapling <code>PaymentAddress</code>\xe2\x80\xa6CiA caller attempted to construct a new account with an \xe2\x80\xa6ClAdds the specified value to the pending spendable total, \xe2\x80\xa6DjA macro to be used by [<code>ambassador::Delegate</code>] to delegate [\xe2\x80\xa60CmReturns the value in the account of shielded change notes \xe2\x80\xa6CfReturns the total value of change and/or shielding \xe2\x80\xa6CnReturns the default external transparent address using the \xe2\x80\xa600000CnDerives the public key corresponding to the given full BIP \xe2\x80\xa6CnDownload the Zcash Sapling parameters if needed, and store \xe2\x80\xa6CdCreates a fake block at the expected next height \xe2\x80\xa6ChReturns the Bech32-encoded human-readable prefix for \xe2\x80\xa6DiReturns the value of <code>max_observed_unspent_height</code>, or the \xe2\x80\xa6ChReturns the number of Orchard notes belonging to the \xe2\x80\xa6ChReturns the number of Sapling notes belonging to the \xe2\x80\xa6DkProvides a mutable reference to the <code>Balance</code> of transparent \xe2\x80\xa6ClThe requested diversifier index was outside the range of \xe2\x80\xa60CnInformation about transactions that receive or spend funds \xe2\x80\xa6AdPayload data for \xe2\x80\xa6ClRemoves the ZIP 32 derivation path at which the spending \xe2\x80\xa6CiConstruct, prove, and sign a transaction or series of \xe2\x80\xa6DdInvokes <code>create_proposed_transactions</code> with the given \xe2\x80\xa6DeDecodes an <code>ExtendedSpendingKey</code> from a Bech32-encoded \xe2\x80\xa60DfWrites an <code>ExtendedSpendingKey</code> as a Bech32-encoded string.0DeWrites a <code>TransparentAddress</code> as a Base58Check-encoded \xe2\x80\xa60CmCreates a fake block at the expected next height spending \xe2\x80\xa6CmReturns the balance in the given account that is detected \xe2\x80\xa6Cnthe size of the Orchard note commitment tree as of the end \xe2\x80\xa6DjReturns the value of <code>orchard_commitment_tree_size</code>, or the \xe2\x80\xa61Cnthe size of the Sapling note commitment tree as of the end \xe2\x80\xa6DjReturns the value of <code>sapling_commitment_tree_size</code>, or the \xe2\x80\xa61AjUTXOs known to this walletCnTransparentAddressBlockFilter restricts the results to the \xe2\x80\xa6CjAdditional context that is needed to compute signature \xe2\x80\xa6>DdScans a <code>Transaction</code> for any information that can be \xe2\x80\xa6ChReads a non-negative ZatBalance from a signed 64-bit \xe2\x80\xa6CnReads a Zatoshis from a signed integer represented as a two\xe2\x80\xa6CdCreates a fake block at the expected next height \xe2\x80\xa6CgReturns a vector of ephemeral transparent addresses \xe2\x80\xa6CmReturns the default target height (for the block in which \xe2\x80\xa6CkReturns all unified full viewing keys known to this wallet.CjThe position of the note in the global note commitment \xe2\x80\xa6CkReturns the position of the note in the note commitment \xe2\x80\xa6CnAdds a transparent UTXO received by the wallet to the data \xe2\x80\xa600CkSaves information about transactions constructed by the \xe2\x80\xa6BlEnsure that wallet recovery recomputes fees.ChThe diversifier index could not be mapped to a valid \xe2\x80\xa60ChThe requested key scope is not supported for address \xe2\x80\xa60CgFetches the transparent output corresponding to the \xe2\x80\xa6Cdthe block heights corresponding to the last note \xe2\x80\xa6CjPrepares the bundle for staged application of external \xe2\x80\xa601CkConstructs a request for Information about transactions \xe2\x80\xa6DeReturns the protocol-typed unified <code>Receiver</code>s of this \xe2\x80\xa60ClDerives a Unified Incoming Viewing Key from this Unified \xe2\x80\xa60CnAdds a transparent \xe2\x80\x9cnull data\xe2\x80\x9d (OP_RETURN) output with \xe2\x80\xa6DhDecodes an <code>ExtendedFullViewingKey</code> from a Bech32-encoded \xe2\x80\xa60DeWrites an <code>ExtendedFullViewingKey</code> as a Bech32-encoded \xe2\x80\xa60ClReturns the metadata associated with a given transparent \xe2\x80\xa6CgThis test attempts to verify that transparent funds \xe2\x80\xa6CmTests that inputs from a source can be spent according to \xe2\x80\xa6C`The HRP for a Bech32-encoded mainnet Sapling \xe2\x80\xa6C`The HRP for a Bech32-encoded regtest Sapling \xe2\x80\xa6C`The HRP for a Bech32-encoded testnet Sapling \xe2\x80\xa6ClReturns the list of unspent transparent outputs received \xe2\x80\xa6ChReturns the human-readable prefix for Bech32-encoded \xe2\x80\xa6ClTests that the wallet correctly reports balance with two \xe2\x80\xa6CmFor each ephemeral address in the wallet, ensure that the \xe2\x80\xa6CjIf a given ephemeral address might have been reserved, \xe2\x80\xa6DjReserves the next <code>n</code> available ephemeral addresses for the \xe2\x80\xa6CkChecks whether the given seed is relevant to any of the \xe2\x80\xa6CkTests sending funds within the given shielded pool in a \xe2\x80\xa6AjUTXOs spent by this walletCjTruncates the test wallet to the specified height, and \xe2\x80\xa6CcReturns the set of previously-exposed ephemeral \xe2\x80\xa6CkReturns the most recently generated unified address for \xe2\x80\xa6CaReads the Sapling components of a v4 transaction.CiImports the given pubkey into the account without key \xe2\x80\xa6CkProposes making a payment to the specified address from \xe2\x80\xa6CbWrites the Sapling components of a v4 transaction.DiConfigures the environment with a <code>TestAccount</code> that has a \xe2\x80\xa60DkThe HRP for a Bech32-encoded mainnet <code>ExtendedFullViewingKey</code>\xe2\x80\xa6C`The HRP for a Bech32-encoded regtest Sapling \xe2\x80\xa6C`The HRP for a Bech32-encoded testnet Sapling \xe2\x80\xa6DjA macro to be used by [<code>ambassador::Delegate</code>] to delegate [\xe2\x80\xa6ChReturns the human-readable prefix for Bech32-encoded \xe2\x80\xa6CbTest attempts to sweep a wallet into a TEX addressCnTests spending all funds within the given shielded pool in \xe2\x80\xa6CkTests sending every piece of spendable funds within the \xe2\x80\xa6ClTests max spendable funds within the given shielded pool \xe2\x80\xa6CiTests that sending all the spendable funds within the \xe2\x80\xa6CkThis test attempts to send the max spendable funds to a \xe2\x80\xa60CiTests that attempting to send all the spendable funds \xe2\x80\xa61DhTests that attempting to send <code>MaxSpendable</code> funds within \xe2\x80\xa6")