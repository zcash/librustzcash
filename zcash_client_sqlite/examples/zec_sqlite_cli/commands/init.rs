use gumdrop::Options;
use secrecy::{SecretVec, Zeroize};

use zcash_client_backend::{data_api::WalletWrite, proto::service};
use zcash_client_sqlite::{
    chain::init::init_blockmeta_db,
    wallet::init::{init_blocks_table, init_wallet_db},
    FsBlockDb, WalletDb,
};
use zcash_primitives::{
    block::BlockHash,
    consensus::Parameters,
    zip32::AccountId,
    zip339::{Count, Mnemonic},
};

use crate::{
    data::{get_db_paths, init_wallet_keys},
    error,
    remote::connect_to_lightwalletd,
};

pub(crate) const CHECKPOINT_HEIGHT: u32 = 950_000;
const CHECKPOINT_HASH: BlockHash = BlockHash([
    0x5d, 0xf7, 0xc0, 0x2b, 0x2a, 0x07, 0x29, 0x4f, 0x29, 0x51, 0xe2, 0xfe, 0xdc, 0x3b, 0x83, 0xd5,
    0x66, 0x31, 0x3d, 0xab, 0xf4, 0x7e, 0x5c, 0x92, 0x9b, 0x1b, 0xe3, 0x2c, 0x0d, 0x05, 0x05, 0x00,
]);
const CHECKPOINT_TIME: u32 = 1_591_609_525;
const CHECKPOINT_TREE: &[u8] = &[
    0x01, 0xf0, 0x63, 0x72, 0x35, 0xc4, 0xa6, 0x99, 0xd4, 0x9b, 0xa9, 0x96, 0x45, 0x7a, 0x6c, 0x4e,
    0xb7, 0xc6, 0x7e, 0xdd, 0x82, 0x70, 0x94, 0x80, 0x65, 0x68, 0x3d, 0xeb, 0x19, 0xef, 0x21, 0x83,
    0x63, 0x01, 0x9f, 0x65, 0xa9, 0x69, 0x2c, 0xef, 0xc7, 0xb9, 0x0b, 0x42, 0xc1, 0x53, 0x8a, 0xc1,
    0xf3, 0x8f, 0x7a, 0x75, 0x98, 0x54, 0x90, 0x89, 0xc4, 0x56, 0x13, 0x15, 0xb4, 0x82, 0xf3, 0x78,
    0x52, 0x30, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x8d, 0x30, 0xd0, 0x03, 0x92, 0x77,
    0xb0, 0x5a, 0xb9, 0xe0, 0xc3, 0x99, 0x0d, 0x53, 0x03, 0x7c, 0x45, 0x89, 0x2b, 0xf1, 0x7a, 0xf2,
    0xd0, 0x4f, 0xef, 0x40, 0xed, 0x48, 0xc1, 0x64, 0xad, 0x22, 0x01, 0xff, 0x5d, 0x86, 0xbb, 0xbe,
    0x36, 0x0e, 0x31, 0x37, 0x8e, 0x78, 0x3b, 0x74, 0x0f, 0x8b, 0x05, 0xdb, 0x2c, 0xf4, 0x24, 0x6b,
    0x95, 0xaa, 0x38, 0x51, 0xd2, 0x2e, 0xd4, 0x55, 0x54, 0x75, 0x03, 0x00, 0x01, 0x0c, 0xef, 0xb2,
    0x57, 0x43, 0xd5, 0xdd, 0x60, 0x62, 0xef, 0x3a, 0xfb, 0xa4, 0x38, 0x73, 0x1c, 0xd5, 0xb3, 0x5b,
    0xef, 0xc1, 0x03, 0x8e, 0xcc, 0xa3, 0x07, 0x6f, 0xd2, 0x05, 0x82, 0x9e, 0x55, 0x00, 0x01, 0xc1,
    0x90, 0x52, 0x38, 0x6d, 0x8b, 0xbe, 0x3c, 0x07, 0xa1, 0xfa, 0xf3, 0x02, 0x28, 0x1d, 0x67, 0x94,
    0x6c, 0xc9, 0x54, 0x7e, 0x7e, 0x18, 0x90, 0xff, 0x56, 0xb3, 0xa3, 0xec, 0x69, 0xc0, 0x31, 0x00,
    0x01, 0xbe, 0x53, 0xa6, 0xcd, 0x33, 0xda, 0x04, 0x42, 0xc7, 0xc6, 0x36, 0x2c, 0x01, 0x72, 0x24,
    0x1f, 0x42, 0xe1, 0x3c, 0x6d, 0xc8, 0x93, 0x43, 0x6a, 0x66, 0x1a, 0x1c, 0xbf, 0x49, 0x77, 0x5c,
    0x1f, 0x00, 0x01, 0x1f, 0x83, 0x22, 0xef, 0x80, 0x6e, 0xb2, 0x43, 0x0d, 0xc4, 0xa7, 0xa4, 0x1c,
    0x1b, 0x34, 0x4b, 0xea, 0x5b, 0xe9, 0x46, 0xef, 0xc7, 0xb4, 0x34, 0x9c, 0x1c, 0x9e, 0xdb, 0x14,
    0xff, 0x9d, 0x39,
];

// Options accepted for the `init` command
#[derive(Debug, Options)]
pub(crate) struct Command {
    #[options(help = "mnemonic phrase to initialise the wallet with (default is new phrase)")]
    phrase: Option<String>,

    #[options(help = "the wallet's birthday (default is current chain height)")]
    birthday: Option<u64>,
}

impl Command {
    pub(crate) async fn run(
        self,
        params: impl Parameters + 'static,
        wallet_dir: Option<String>,
    ) -> Result<(), anyhow::Error> {
        let opts = self;

        // Get the current chain height (for the wallet's birthday).
        let mut client = connect_to_lightwalletd().await?;
        let birthday = if let Some(birthday) = opts.birthday {
            birthday
        } else {
            client
                .get_latest_block(service::ChainSpec::default())
                .await?
                .into_inner()
                .height
        };

        // Parse or create the wallet's mnemonic phrase.
        let mnemonic = if let Some(phrase) = opts.phrase {
            Mnemonic::from_phrase(&phrase)?
        } else {
            Mnemonic::generate(Count::Words24)
        };

        // Save the wallet keys to disk.
        init_wallet_keys(wallet_dir.as_ref(), &mnemonic, birthday)?;

        // Initialise the block and wallet DBs.
        let (db_cache, db_data) = get_db_paths(wallet_dir);
        let mut db_cache = FsBlockDb::for_path(db_cache).map_err(error::Error::from)?;
        let mut db_data = WalletDb::for_path(db_data, params)?;
        init_blockmeta_db(&mut db_cache)?;
        init_wallet_db(&mut db_data, None)?;

        // Load the checkpoint into the data DB.
        init_blocks_table(
            &db_data,
            CHECKPOINT_HEIGHT.into(),
            CHECKPOINT_HASH,
            CHECKPOINT_TIME,
            CHECKPOINT_TREE,
        )?;

        // Add one account.
        let seed = {
            let mut seed = mnemonic.to_seed("");
            let secret = seed.to_vec();
            seed.zeroize();
            SecretVec::new(secret)
        };
        let mut db_mut = db_data.get_update_ops()?;
        let (account, _) = db_mut.create_account(&seed)?;
        assert_eq!(account, AccountId::from(0));

        Ok(())
    }
}
